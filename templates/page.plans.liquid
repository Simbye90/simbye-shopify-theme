<!DOCTYPE html>
<html lang="{{ shop.locale }}">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Check eSIM Status</title>
  
  <!-- jQuery LADEN - WICHTIG! -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  
<!-- templates/page.test-api.liquid -->
<!-- API DATA TESTER - NUR ZUM CHECKEN WAS WIR BEKOMMEN -->

<style>
.api-test {
  max-width: 1200px;
  margin: 40px auto;
  padding: 0 20px;
  font-family: monospace;
}

.test-input {
  display: flex;
  gap: 10px;
  margin-bottom: 30px;
  padding: 20px;
  background: #f5f5f5;
  border-radius: 12px;
}

.test-input input {
  flex: 1;
  padding: 12px;
  font-size: 16px;
  border: 2px solid #009a61;
  border-radius: 8px;
}

.test-input button {
  padding: 12px 30px;
  background: #009a61;
  color: white;
  border: none;
  border-radius: 8px;
  cursor: pointer;
  font-weight: bold;
}

.data-display {
  background: #1a1a1a;
  color: #00ff00;
  padding: 20px;
  border-radius: 12px;
  overflow-x: auto;
  min-height: 400px;
  white-space: pre-wrap;
  font-size: 14px;
  line-height: 1.6;
}

.status {
  padding: 10px;
  margin-bottom: 20px;
  border-radius: 8px;
  font-weight: bold;
  text-align: center;
}

.status.loading { background: #fff3cd; color: #856404; }
.status.success { background: #d4edda; color: #155724; }
.status.error { background: #f8d7da; color: #721c24; }

.important-data {
  background: #2a2a2a;
  padding: 20px;
  margin: 20px 0;
  border-radius: 12px;
  border: 2px solid #009a61;
}

.data-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 15px;
  margin-top: 20px;
}

.data-item {
  background: #333;
  padding: 15px;
  border-radius: 8px;
  border-left: 4px solid #009a61;
}

.data-label {
  color: #999;
  font-size: 12px;
  text-transform: uppercase;
  margin-bottom: 5px;
}

.data-value {
  color: #00ff00;
  font-size: 16px;
  font-weight: bold;
  word-break: break-all;
}

.test-orders {
  margin-top: 20px;
  padding: 15px;
  background: #f0f0f0;
  border-radius: 8px;
}

.test-orders h3 {
  margin-bottom: 10px;
  color: #333;
}

.test-btn {
  margin: 5px;
  padding: 8px 15px;
  background: #009a61;
  color: white;
  border: none;
  border-radius: 6px;
  cursor: pointer;
}

.test-btn:hover {
  background: #00824f;
}
</style>

<div class="api-test">
  <h1 style="text-align: center; color: #009a61;">üî¨ eSIM API DATA TESTER</h1>
  
  <div class="test-input">
    <input 
      type="text" 
      id="testOrder" 
      placeholder="Enter Order Number (e.g. 121233)"
      value=""
    >
    <button onclick="testAPI()">TEST API</button>
    <button onclick="clearData()">CLEAR</button>
  </div>
  
  <div class="test-orders">
    <h3>Quick Test Numbers:</h3>
    <button class="test-btn" onclick="testWithNumber('121233')">121233</button>
    <button class="test-btn" onclick="testWithNumber('1212')">1212 (ohne 33)</button>
    <button class="test-btn" onclick="testWithNumber('B24022308586593')">B24022308586593</button>
    <button class="test-btn" onclick="testWithNumber('24022308264990')">24022308264990</button>
  </div>
  
  <div id="status" class="status" style="display:none;"></div>
  
  <div class="important-data" style="display:none;" id="importantData">
    <h2 style="color: #00ff00; margin-bottom: 20px;">üìä WICHTIGE DATEN F√úR CHECK ESIM PAGE:</h2>
    <div class="data-grid" id="dataGrid"></div>
  </div>
  
  <div class="data-display" id="output">
    Ready to test API...
    
    Endpoints to test:
    1. /info/{orderNumber} - Main eSIM Data
    2. /plans?esimTranNo={}&packageCode={}&currency={} - Top Up Plans
    3. /info/{orderNumber}/{email} - With Email Verification
    
    Click a test number or enter your own order number.
  </div>
</div>

<script>
// jQuery Check
if (typeof jQuery === 'undefined') {
  document.write('<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"><\/script>');
}

function testWithNumber(num) {
  document.getElementById('testOrder').value = num;
  testAPI();
}

function clearData() {
  document.getElementById('output').textContent = 'Cleared. Ready for new test...';
  document.getElementById('status').style.display = 'none';
  document.getElementById('importantData').style.display = 'none';
}

function testAPI() {
  const orderNumber = document.getElementById('testOrder').value.trim();
  
  if (!orderNumber) {
    alert('Please enter an order number');
    return;
  }
  
  const output = document.getElementById('output');
  const status = document.getElementById('status');
  const importantData = document.getElementById('importantData');
  const dataGrid = document.getElementById('dataGrid');
  
  // Show loading
  status.className = 'status loading';
  status.textContent = 'Loading... Testing order: ' + orderNumber;
  status.style.display = 'block';
  importantData.style.display = 'none';
  
  output.textContent = 'üîÑ Calling API...\n\n';
  output.textContent += 'URL: https://simbye.com/apps/topup/info/' + orderNumber + '\n';
  output.textContent += 'Time: ' + new Date().toISOString() + '\n';
  output.textContent += '----------------------------------------\n\n';
  
  // API Call
  jQuery.ajax({
    url: 'https://simbye.com/apps/topup/info/' + orderNumber,
    method: 'GET',
    headers: {
      'ngrok-skip-browser-warning': 'skip',
      'Accept': 'application/json'
    },
    dataType: 'json',
    timeout: 15000,
    success: function(response) {
      console.log('API Response:', response);
      
      status.className = 'status success';
      status.textContent = '‚úÖ SUCCESS - Data received!';
      
      // Show raw JSON
      output.textContent = '‚úÖ RAW API RESPONSE:\n\n';
      output.textContent += JSON.stringify(response, null, 2);
      
      // Extract important data
      if (response && response.data && response.data.obj && response.data.obj.esimList) {
        const esim = response.data.obj.esimList[0];
        if (esim) {
          importantData.style.display = 'block';
          
          // Parse important fields
          const pkg = esim.packageList && esim.packageList[0] || {};
          
          const importantFields = {
            'eSIM Status': esim.esimStatus || 'N/A',
            'eSIM TranNo': esim.esimTranNo || 'N/A',
            'ICCID': esim.iccid || 'N/A',
            'IMSI': esim.imsi || 'N/A',
            'Order No': esim.orderNo || 'N/A',
            'QR Code URL': esim.qrCodeUrl ? '‚úÖ Available' : '‚ùå Missing',
            'Activation Time': esim.activateTime || 'Not Activated',
            'Expired Time': esim.expiredTime || 'N/A',
            'Total Volume (Bytes)': esim.totalVolume || 0,
            'Total Volume (GB)': ((esim.totalVolume || 0) / 1073741824).toFixed(2) + ' GB',
            'Order Usage (Bytes)': esim.orderUsage || 0,
            'Order Usage (GB)': ((esim.orderUsage || 0) / 1073741824).toFixed(2) + ' GB',
            'Data Left (GB)': (((esim.totalVolume || 0) - (esim.orderUsage || 0)) / 1073741824).toFixed(2) + ' GB',
            'Usage Percentage': esim.totalVolume ? Math.round((esim.orderUsage / esim.totalVolume) * 100) + '%' : '0%',
            'Package Name': pkg.packageName || 'N/A',
            'Package Code': pkg.packageCode || 'N/A',
            'Duration': pkg.duration ? pkg.duration + ' Days' : 'N/A',
            'Location Code': pkg.locationCode || 'N/A',
            'Active Type': esim.activeType || 'N/A',
            'Data Type': esim.dataType || 'N/A',
            'SMDP Status': esim.smdpStatus || 'N/A'
          };
          
          // Check if eSIM is rechargeable
          const isExpired = new Date(esim.expiredTime) < new Date();
          const isUnlimited = pkg.packageName && pkg.packageName.toLowerCase().includes('unlimited');
          const isRechargeable = !isExpired && !isUnlimited;
          
          // Add status info
          importantFields['Is Expired'] = isExpired ? '‚ùå YES - NOT RECHARGEABLE' : '‚úÖ NO - Still Active';
          importantFields['Is Unlimited'] = isUnlimited ? '‚ö†Ô∏è YES - NOT RECHARGEABLE' : '‚úÖ NO - Can Top Up';
          importantFields['Rechargeable'] = isRechargeable ? '‚úÖ YES' : '‚ùå NO';
          
          // Display in grid
          dataGrid.innerHTML = '';
          for (const [label, value] of Object.entries(importantFields)) {
            const item = document.createElement('div');
            item.className = 'data-item';
            item.innerHTML = `
              <div class="data-label">${label}</div>
              <div class="data-value">${value}</div>
            `;
            dataGrid.appendChild(item);
          }
          
          // Test Top-Up Plans API if rechargeable
          if (isRechargeable && esim.esimTranNo && pkg.packageCode) {
            output.textContent += '\n\n----------------------------------------\n';
            output.textContent += 'üîÑ TESTING TOP-UP PLANS API...\n\n';
            
            const currency = window.Shopify?.currency?.active || 'USD';
            const topupUrl = `https://simbye.com/apps/topup/plans?esimTranNo=${esim.esimTranNo}&packageCode=${pkg.packageCode}&currency=${currency}`;
            
            output.textContent += 'URL: ' + topupUrl + '\n\n';
            
            jQuery.ajax({
              url: topupUrl,
              method: 'GET',
              headers: {
                'ngrok-skip-browser-warning': 'skip'
              },
              timeout: 10000,
              success: function(plansResponse) {
                output.textContent += '‚úÖ TOP-UP PLANS RESPONSE:\n\n';
                output.textContent += JSON.stringify(plansResponse, null, 2);
              },
              error: function(xhr, status, error) {
                output.textContent += '‚ùå TOP-UP PLANS ERROR:\n';
                output.textContent += 'Status: ' + status + '\n';
                output.textContent += 'Error: ' + error + '\n';
              }
            });
          }
        }
      }
    },
    error: function(xhr, status, error) {
      console.error('API Error:', xhr, status, error);
      
      status.className = 'status error';
      status.textContent = '‚ùå ERROR: ' + error;
      
      output.textContent = '‚ùå API ERROR:\n\n';
      output.textContent += 'Status: ' + status + '\n';
      output.textContent += 'Error: ' + error + '\n';
      output.textContent += 'Response Status: ' + xhr.status + '\n\n';
      
      if (xhr.responseText) {
        output.textContent += 'Response:\n' + xhr.responseText;
      }
      
      if (xhr.status === 0) {
        output.textContent += '\n\n‚ö†Ô∏è CORS ERROR oder Network Problem!\n';
        output.textContent += 'M√∂gliche L√∂sungen:\n';
        output.textContent += '1. Shopify App Proxy verwenden\n';
        output.textContent += '2. Backend Proxy Server\n';
        output.textContent += '3. API CORS Headers anpassen\n';
      }
    }
  });
}

// Auto-test on load if order_number in URL
window.onload = function() {
  const urlParams = new URLSearchParams(window.location.search);
  const orderFromUrl = urlParams.get('order_number');
  if (orderFromUrl) {
    document.getElementById('testOrder').value = orderFromUrl;
    setTimeout(testAPI, 500);
  }
};
</script>