<!DOCTYPE html>
<html lang="{{ shop.locale }}">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Check eSIM Status</title>
  
  <!-- jQuery LADEN - WICHTIG! -->
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
  
<!-- templates/page.api-test.liquid -->
<!-- SMART eSIM API TESTER - ENTERPRISE VERSION -->

<style>
.api-test {
  max-width: 1400px;
  margin: 40px auto;
  padding: 0 20px;
  font-family: system-ui, -apple-system, sans-serif;
}

.test-header {
  text-align: center;
  margin-bottom: 40px;
  padding: 30px;
  background: linear-gradient(135deg, #009a61, #00d97e);
  color: white;
  border-radius: 16px;
}

.test-header h1 {
  margin: 0;
  font-size: 32px;
  font-weight: 800;
}

.test-controls {
  display: flex;
  gap: 15px;
  margin-bottom: 30px;
  padding: 25px;
  background: white;
  border-radius: 16px;
  box-shadow: 0 4px 12px rgba(0,0,0,0.08);
}

.test-controls input {
  flex: 1;
  padding: 14px 20px;
  font-size: 16px;
  border: 2px solid #e5e7eb;
  border-radius: 10px;
  transition: all 0.3s;
}

.test-controls input:focus {
  border-color: #009a61;
  outline: none;
  box-shadow: 0 0 0 3px rgba(0,154,97,0.1);
}

.test-btn {
  padding: 14px 28px;
  background: #009a61;
  color: white;
  border: none;
  border-radius: 10px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;
}

.test-btn:hover {
  background: #00824f;
  transform: translateY(-2px);
  box-shadow: 0 6px 20px rgba(0,154,97,0.3);
}

.test-btn.secondary {
  background: #6b7280;
}

.test-btn.danger {
  background: #ef4444;
}

/* Quick Test Buttons */
.quick-tests {
  margin-bottom: 30px;
  padding: 20px;
  background: #f9fafb;
  border-radius: 12px;
}

.quick-tests h3 {
  margin-top: 0;
  color: #374151;
  font-size: 14px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.test-examples {
  display: flex;
  flex-wrap: wrap;
  gap: 10px;
}

.example-btn {
  padding: 10px 18px;
  background: white;
  border: 2px solid #e5e7eb;
  border-radius: 8px;
  cursor: pointer;
  font-size: 14px;
  transition: all 0.3s;
}

.example-btn:hover {
  border-color: #009a61;
  background: #f0fdf4;
}

.example-btn.normal {
  border-left: 4px solid #3b82f6;
}

.example-btn.unlimited {
  border-left: 4px solid #8b5cf6;
}

.example-btn.daily {
  border-left: 4px solid #f59e0b;
}

/* Status Messages */
.status-msg {
  padding: 16px 20px;
  border-radius: 10px;
  margin-bottom: 20px;
  font-weight: 500;
  display: none;
  animation: slideIn 0.3s;
}

.status-msg.show {
  display: block;
}

.status-msg.loading {
  background: #fef3c7;
  color: #92400e;
  border: 1px solid #fcd34d;
}

.status-msg.success {
  background: #d1fae5;
  color: #065f46;
  border: 1px solid #6ee7b7;
}

.status-msg.error {
  background: #fee2e2;
  color: #991b1b;
  border: 1px solid #fca5a5;
}

/* Main Results Container */
.results-container {
  display: none;
  gap: 30px;
  animation: fadeIn 0.5s;
}

.results-container.show {
  display: grid;
  grid-template-columns: 1fr 1fr;
}

/* eSIM Type Card */
.esim-type-card {
  background: white;
  border-radius: 16px;
  padding: 30px;
  box-shadow: 0 10px 25px rgba(0,0,0,0.08);
  grid-column: 1 / -1;
  position: relative;
  overflow: hidden;
}

.esim-type-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
}

.esim-type-card.normal::before {
  background: linear-gradient(90deg, #3b82f6, #60a5fa);
}

.esim-type-card.unlimited::before {
  background: linear-gradient(90deg, #8b5cf6, #a78bfa);
}

.esim-type-card.daily::before {
  background: linear-gradient(90deg, #f59e0b, #fbbf24);
}

.type-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 25px;
}

.type-badge {
  padding: 8px 20px;
  border-radius: 100px;
  font-weight: 700;
  font-size: 14px;
  text-transform: uppercase;
  letter-spacing: 0.5px;
  color: white;
}

.type-badge.normal {
  background: linear-gradient(135deg, #3b82f6, #60a5fa);
}

.type-badge.unlimited {
  background: linear-gradient(135deg, #8b5cf6, #a78bfa);
}

.type-badge.daily {
  background: linear-gradient(135deg, #f59e0b, #fbbf24);
}

.esim-title {
  font-size: 24px;
  font-weight: 700;
  color: #111827;
  margin: 0;
}

/* Data Grid */
.data-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
  gap: 20px;
  margin-top: 25px;
}

.data-item {
  background: #f9fafb;
  padding: 20px;
  border-radius: 12px;
  border: 1px solid #e5e7eb;
}

.data-label {
  font-size: 12px;
  text-transform: uppercase;
  color: #6b7280;
  letter-spacing: 0.5px;
  margin-bottom: 8px;
}

.data-value {
  font-size: 20px;
  font-weight: 700;
  color: #111827;
}

.data-value.green {
  color: #10b981;
}

.data-value.red {
  color: #ef4444;
}

.data-value.yellow {
  color: #f59e0b;
}

.data-value.purple {
  color: #8b5cf6;
}

/* Important Info Box */
.important-box {
  background: linear-gradient(135deg, #fef3c7, #fef9c3);
  border: 2px solid #fbbf24;
  border-radius: 12px;
  padding: 20px;
  margin-top: 20px;
}

.important-box h3 {
  margin-top: 0;
  color: #92400e;
  display: flex;
  align-items: center;
  gap: 10px;
}

.key-info {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 15px;
  margin-top: 15px;
}

.key-item {
  display: flex;
  align-items: center;
  gap: 8px;
  font-size: 14px;
  color: #92400e;
  font-weight: 600;
}

/* Raw Data Display */
.raw-data {
  background: #1e293b;
  color: #10b981;
  padding: 25px;
  border-radius: 12px;
  font-family: 'Monaco', 'Courier New', monospace;
  font-size: 13px;
  line-height: 1.8;
  overflow-x: auto;
  white-space: pre-wrap;
  word-break: break-all;
  max-height: 600px;
  overflow-y: auto;
}

.raw-data::-webkit-scrollbar {
  width: 8px;
}

.raw-data::-webkit-scrollbar-track {
  background: #0f172a;
}

.raw-data::-webkit-scrollbar-thumb {
  background: #475569;
  border-radius: 4px;
}

/* Email Modal */
.email-modal {
  display: none;
  position: fixed;
  inset: 0;
  background: rgba(0,0,0,0.7);
  backdrop-filter: blur(5px);
  z-index: 9999;
  animation: fadeIn 0.3s;
}

.modal-content {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 40px;
  border-radius: 20px;
  max-width: 450px;
  width: 90%;
  box-shadow: 0 20px 60px rgba(0,0,0,0.3);
}

.modal-header {
  text-align: center;
  margin-bottom: 30px;
}

.modal-icon {
  font-size: 48px;
  margin-bottom: 15px;
}

.modal-title {
  font-size: 24px;
  font-weight: 700;
  color: #111827;
  margin: 0 0 10px;
}

.modal-subtitle {
  color: #6b7280;
  font-size: 14px;
}

.email-input {
  width: 100%;
  padding: 14px 20px;
  border: 2px solid #e5e7eb;
  border-radius: 10px;
  font-size: 16px;
  margin-bottom: 20px;
}

.email-input:focus {
  border-color: #009a61;
  outline: none;
  box-shadow: 0 0 0 3px rgba(0,154,97,0.1);
}

.modal-actions {
  display: flex;
  gap: 12px;
}

.modal-btn {
  flex: 1;
  padding: 14px;
  border: none;
  border-radius: 10px;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s;
}

.modal-btn.primary {
  background: linear-gradient(135deg, #009a61, #00d97e);
  color: white;
}

.modal-btn.secondary {
  background: #f3f4f6;
  color: #6b7280;
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

@keyframes slideIn {
  from { transform: translateY(-10px); opacity: 0; }
  to { transform: translateY(0); opacity: 1; }
}

/* Responsive */
@media (max-width: 768px) {
  .results-container.show {
    grid-template-columns: 1fr;
  }
  
  .test-controls {
    flex-direction: column;
  }
  
  .data-grid {
    grid-template-columns: 1fr;
  }
}
</style>

<div class="api-test">
  <!-- Header -->
  <div class="test-header">
    <h1>üî¨ eSIM Smart API Tester</h1>
    <p style="margin: 10px 0 0; opacity: 0.9;">Detects Normal, Unlimited & Daily eSIMs automatically</p>
  </div>
  
  <!-- Test Controls -->
  <div class="test-controls">
    <input 
      type="text" 
      id="orderInput" 
      placeholder="Enter Order Number or eSIM TranNo"
    >
    <button class="test-btn" onclick="testOrder()">üîç TEST</button>
    <button class="test-btn secondary" onclick="testWithEmail()">üìß TEST WITH EMAIL</button>
    <button class="test-btn danger" onclick="clearAll()">üóëÔ∏è CLEAR</button>
  </div>
  
  <!-- Quick Test Examples -->
  <div class="quick-tests">
    <h3>Quick Test Examples:</h3>
    <div class="test-examples">
      <button class="example-btn normal" onclick="quickTest('25100113120003')">
        üîµ Albania 3GB (Normal)
      </button>
      <button class="example-btn daily" onclick="quickTest('25100116090001')">
        üü° Brazil 1GB/Day (Daily)
      </button>
      <button class="example-btn unlimited" onclick="quickTest('unlimited-test')">
        üü£ Unlimited Test
      </button>
      <button class="example-btn" onclick="quickTest('121233')">
        Generic: 121233
      </button>
      <button class="example-btn" onclick="quickTest('B25100110340001')">
        Order: B25100110340001
      </button>
    </div>
  </div>
  
  <!-- Status Messages -->
  <div id="statusMsg" class="status-msg"></div>
  
  <!-- Results Container -->
  <div id="results" class="results-container">
    <!-- eSIM Type Card -->
    <div id="typeCard" class="esim-type-card">
      <div class="type-header">
        <h2 class="esim-title" id="esimTitle">Loading...</h2>
        <span id="typeBadge" class="type-badge">DETECTING...</span>
      </div>
      
      <!-- Important Info -->
      <div class="important-box">
        <h3>‚ö° Key Information</h3>
        <div class="key-info" id="keyInfo"></div>
      </div>
      
      <!-- Data Grid -->
      <div class="data-grid" id="dataGrid"></div>
    </div>
    
    <!-- Raw JSON Display -->
    <div style="grid-column: 1 / -1;">
      <h3 style="margin-bottom: 15px;">üìä Raw API Response</h3>
      <div class="raw-data" id="rawData"></div>
    </div>
  </div>
</div>

<!-- Email Verification Modal -->
<div id="emailModal" class="email-modal">
  <div class="modal-content">
    <div class="modal-header">
      <div class="modal-icon">üîê</div>
      <h2 class="modal-title">Email Verification</h2>
      <p class="modal-subtitle">Enter your email to unlock QR Code & sensitive data</p>
    </div>
    <input 
      type="email" 
      id="emailInput" 
      class="email-input"
      placeholder="your@email.com"
    >
    <div class="modal-actions">
      <button class="modal-btn primary" onclick="verifyWithEmail()">Verify</button>
      <button class="modal-btn secondary" onclick="closeEmailModal()">Cancel</button>
    </div>
  </div>
</div>

<script>
// jQuery laden falls nicht vorhanden
if (typeof jQuery === 'undefined') {
  document.write('<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"><\/script>');
}

// Global Variables
let currentOrder = null;
let currentEsimData = null;

// Quick Test
function quickTest(orderNumber) {
  document.getElementById('orderInput').value = orderNumber;
  testOrder();
}

// Clear All
function clearAll() {
  document.getElementById('orderInput').value = '';
  document.getElementById('statusMsg').className = 'status-msg';
  document.getElementById('results').classList.remove('show');
  document.getElementById('rawData').textContent = '';
  currentOrder = null;
  currentEsimData = null;
}

// Test with Email
function testWithEmail() {
  const order = document.getElementById('orderInput').value.trim();
  if (!order) {
    showStatus('Please enter an order number first', 'error');
    return;
  }
  currentOrder = order;
  document.getElementById('emailModal').style.display = 'block';
}

// Close Email Modal
function closeEmailModal() {
  document.getElementById('emailModal').style.display = 'none';
  document.getElementById('emailInput').value = '';
}

// Verify with Email
function verifyWithEmail() {
  const email = document.getElementById('emailInput').value.trim();
  if (!email) {
    alert('Please enter an email');
    return;
  }
  
  closeEmailModal();
  testOrderWithEmail(currentOrder, email);
}

// Test Order with Email
function testOrderWithEmail(orderNumber, email) {
  const apiUrl = 'https://simbye.com/apps/topup/info/' + orderNumber + '/' + email;
  
  showStatus('üîê Testing with email verification...', 'loading');
  
  jQuery.ajax({
    url: apiUrl,
    method: 'GET',
    headers: {
      'ngrok-skip-browser-warning': 'skip',
      'Accept': 'application/json'
    },
    timeout: 10000,
    success: function(response) {
      showStatus('‚úÖ Verified! Full data loaded with QR Code', 'success');
      processResponse(response);
    },
    error: function(xhr, status, error) {
      showStatus('‚ùå Verification failed: ' + error, 'error');
    }
  });
}

// Main Test Function
function testOrder() {
  const orderNumber = document.getElementById('orderInput').value.trim();
  
  if (!orderNumber) {
    showStatus('Please enter an order number', 'error');
    return;
  }
  
  currentOrder = orderNumber;
  const apiUrl = 'https://simbye.com/apps/topup/info/' + orderNumber;
  
  showStatus('üîÑ Loading eSIM data...', 'loading');
  
  jQuery.ajax({
    url: apiUrl,
    method: 'GET',
    headers: {
      'ngrok-skip-browser-warning': 'skip',
      'Accept': 'application/json'
    },
    timeout: 10000,
    success: function(response) {
      showStatus('‚úÖ Data loaded successfully!', 'success');
      processResponse(response);
    },
    error: function(xhr, status, error) {
      showStatus('‚ùå Error: ' + error, 'error');
      console.error('API Error:', xhr, status, error);
    }
  });
}

// Process API Response
function processResponse(response) {
  console.log('API Response:', response);
  
  if (!response || !response.data || !response.data.obj || !response.data.obj.esimList) {
    showStatus('Invalid response format', 'error');
    return;
  }
  
  const esim = response.data.obj.esimList[0];
  if (!esim) {
    showStatus('No eSIM found', 'error');
    return;
  }
  
  currentEsimData = esim;
  const pkg = esim.packageList && esim.packageList[0] || {};
  
  // Detect eSIM Type
  const esimType = detectEsimType(esim, pkg);
  
  // Update UI
  displayEsimData(esim, pkg, esimType);
  
  // Show raw data
  document.getElementById('rawData').textContent = JSON.stringify(response, null, 2);
  
  // Show results
  document.getElementById('results').classList.add('show');
}

// Detect eSIM Type
function detectEsimType(esim, pkg) {
  const packageName = (pkg.packageName || '').toLowerCase();
  const dataType = esim.dataType;
  const fupPolicy = esim.fupPolicy;
  const slug = pkg.slug || '';
  
  // Check for Daily
  if (packageName.includes('/day') || packageName.includes('daily') || slug.includes('_Daily')) {
    return {
      type: 'DAILY',
      label: 'üü° DAILY RESET',
      description: 'Data resets daily at midnight UTC',
      dailyLimit: formatBytes(pkg.volume || 1073741824),
      totalDays: esim.totalDuration,
      throttleSpeed: fupPolicy || 'No throttling',
      canTopUp: esim.supportTopUpType === 1 && !isExpired(esim)
    };
  }
  
  // Check for Unlimited
  if (packageName.includes('unlimited') || dataType === 2) {
    return {
      type: 'UNLIMITED',
      label: 'üü£ UNLIMITED',
      description: 'No data limits',
      totalDays: esim.totalDuration,
      canTopUp: false
    };
  }
  
  // Normal eSIM
  return {
    type: 'NORMAL',
    label: 'üîµ NORMAL',
    description: 'Fixed data volume',
    totalData: formatBytes(esim.totalVolume),
    totalDays: esim.totalDuration,
    canTopUp: esim.supportTopUpType === 1 && !isExpired(esim)
  };
}

// Display eSIM Data
function displayEsimData(esim, pkg, esimType) {
  // Update Type Card
  const typeCard = document.getElementById('typeCard');
  typeCard.className = 'esim-type-card ' + esimType.type.toLowerCase();
  
  // Title
  document.getElementById('esimTitle').textContent = pkg.packageName || 'eSIM Package';
  
  // Type Badge
  const typeBadge = document.getElementById('typeBadge');
  typeBadge.textContent = esimType.label;
  typeBadge.className = 'type-badge ' + esimType.type.toLowerCase();
  
  // Key Info
  const keyInfo = document.getElementById('keyInfo');
  keyInfo.innerHTML = '';
  
  if (esimType.type === 'DAILY') {
    addKeyItem(keyInfo, 'üìä Daily Limit', esimType.dailyLimit);
    addKeyItem(keyInfo, 'üìÖ Total Days', esimType.totalDays + ' days');
    addKeyItem(keyInfo, 'üö¶ After Limit', esimType.throttleSpeed);
    addKeyItem(keyInfo, 'üîÑ Resets', 'Daily at 00:00 UTC');
  } else if (esimType.type === 'UNLIMITED') {
    addKeyItem(keyInfo, '‚ôæÔ∏è Data', 'Unlimited');
    addKeyItem(keyInfo, 'üìÖ Duration', esimType.totalDays + ' days');
    addKeyItem(keyInfo, 'üöÄ Speed', 'No limits');
  } else {
    addKeyItem(keyInfo, 'üìä Total Data', esimType.totalData);
    addKeyItem(keyInfo, 'üìÖ Duration', esimType.totalDays + ' days');
    addKeyItem(keyInfo, 'üí∞ Top-Up', esimType.canTopUp ? '‚úÖ Available' : '‚ùå Not available');
  }
  
  // Data Grid
  const dataGrid = document.getElementById('dataGrid');
  dataGrid.innerHTML = '';
  
  // Status
  addDataItem(dataGrid, 'Status', getStatusDisplay(esim.esimStatus), getStatusColor(esim.esimStatus));
  
  // Activation
  addDataItem(dataGrid, 'Activation', esim.activateTime ? formatDate(esim.activateTime) : 'Not activated', 
              esim.activateTime ? 'green' : 'yellow');
  
  // Expiry
  const isExp = isExpired(esim);
  addDataItem(dataGrid, 'Expires', formatDate(esim.expiredTime), isExp ? 'red' : 'green');
  
  // Usage
  const usage = calculateUsage(esim);
  addDataItem(dataGrid, 'Data Used', usage.used + ' / ' + usage.total, 
              usage.percentage > 80 ? 'red' : 'green');
  
  // Network
  addDataItem(dataGrid, 'Network', esim.apn || 'N/A');
  addDataItem(dataGrid, 'IP Location', esim.ipExport || 'N/A');
  
  // Security
  addDataItem(dataGrid, 'QR Code', esim.qrCodeUrl ? '‚úÖ Available' : 'üîí Need email verify', 
              esim.qrCodeUrl ? 'green' : 'yellow');
  
  // Top-Up
  const topUpStatus = getTopUpStatus(esim, esimType);
  addDataItem(dataGrid, 'Top-Up Status', topUpStatus.text, topUpStatus.color);
  
  // Technical
  addDataItem(dataGrid, 'ICCID', formatIccid(esim.iccid));
  addDataItem(dataGrid, 'Package Code', pkg.packageCode || 'N/A');
}

// Helper Functions
function formatBytes(bytes) {
  const gb = bytes / 1073741824;
  if (gb < 1) {
    return Math.round(bytes / 1048576) + ' MB';
  }
  return gb.toFixed(2) + ' GB';
}

function formatDate(dateString) {
  if (!dateString) return 'N/A';
  return new Date(dateString).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  });
}

function formatIccid(iccid) {
  if (!iccid) return 'N/A';
  return iccid.replace(/(.{4})/g, '$1 ').trim();
}

function isExpired(esim) {
  return new Date(esim.expiredTime) < new Date();
}

function getStatusDisplay(status) {
  const statusMap = {
    'ACTIVE': 'üü¢ Active',
    'GOT_RESOURCE': 'üü° Ready to Install',
    'CANCEL': 'üî¥ Cancelled',
    'EXPIRED': '‚ö´ Expired'
  };
  return statusMap[status] || status;
}

function getStatusColor(status) {
  const colorMap = {
    'ACTIVE': 'green',
    'GOT_RESOURCE': 'yellow',
    'CANCEL': 'red',
    'EXPIRED': 'red'
  };
  return colorMap[status] || '';
}

function calculateUsage(esim) {
  const totalGB = esim.totalVolume / 1073741824;
  const usedGB = esim.orderUsage / 1073741824;
  const percentage = esim.totalVolume > 0 ? (esim.orderUsage / esim.totalVolume * 100) : 0;
  
  return {
    total: formatBytes(esim.totalVolume),
    used: formatBytes(esim.orderUsage),
    left: formatBytes(esim.totalVolume - esim.orderUsage),
    percentage: Math.round(percentage)
  };
}

function getTopUpStatus(esim, esimType) {
  if (esimType.type === 'UNLIMITED' || esimType.type === 'DAILY') {
    return { text: '‚ùå Not needed (Unlimited/Daily)', color: 'purple' };
  }
  if (isExpired(esim)) {
    return { text: '‚ùå Expired - Buy new', color: 'red' };
  }
  if (esim.esimStatus === 'CANCEL') {
    return { text: '‚ùå Cancelled', color: 'red' };
  }
  if (esim.supportTopUpType !== 1) {
    return { text: '‚ùå Not supported', color: 'yellow' };
  }
  return { text: '‚úÖ Available', color: 'green' };
}

// UI Helper Functions
function showStatus(message, type) {
  const statusMsg = document.getElementById('statusMsg');
  statusMsg.textContent = message;
  statusMsg.className = 'status-msg show ' + type;
  
  if (type === 'success') {
    setTimeout(() => statusMsg.classList.remove('show'), 3000);
  }
}

function addKeyItem(container, label, value) {
  const item = document.createElement('div');
  item.className = 'key-item';
  item.innerHTML = `<span>${label}:</span> <strong>${value}</strong>`;
  container.appendChild(item);
}

function addDataItem(container, label, value, colorClass = '') {
  const item = document.createElement('div');
  item.className = 'data-item';
  item.innerHTML = `
    <div class="data-label">${label}</div>
    <div class="data-value ${colorClass}">${value}</div>
  `;
  container.appendChild(item);
}

// Auto-test on load
window.onload = function() {
  const urlParams = new URLSearchParams(window.location.search);
  const orderFromUrl = urlParams.get('order_number');
  if (orderFromUrl) {
    document.getElementById('orderInput').value = orderFromUrl;
    setTimeout(testOrder, 500);
  }
};
</script>