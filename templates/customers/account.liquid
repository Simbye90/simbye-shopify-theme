<!-- templates/customers/account.liquid -->
<!-- SIMBYE ENTERPRISE ACCOUNT - COMPLETE FIXED VERSION -->

<!-- jQuery MUSS geladen sein -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<style>
/* ============================================
   SIMBYE ENTERPRISE ACCOUNT - PRODUCTION READY
   ============================================ */

:root {
  --primary: #009a61;
  --primary-hover: #00824f;
  --primary-light: rgba(0, 154, 97, 0.1);
  --success: #00d97e;
  --warning: #ff9a00;
  --danger: #ff3b30;
  --text: #1a1a1a;
  --text-secondary: #666666;
  --bg: #ffffff;
  --bg-secondary: #f8f9fa;
  --card-bg: #ffffff;
  --border: rgba(0, 0, 0, 0.08);
  --shadow-sm: 0 4px 12px rgba(0, 0, 0, 0.06);
  --shadow-md: 0 8px 24px rgba(0, 0, 0, 0.08);
  --shadow-lg: 0 12px 32px rgba(0, 154, 97, 0.15);
  --shadow-xl: 0 24px 64px rgba(0, 154, 97, 0.2);
  --gradient: linear-gradient(135deg, #009a61 0%, #00d97e 100%);
  --radius: 20px;
  --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

[data-theme="dark"] {
  --text: #f5f5f5;
  --text-secondary: #b0b0b0;
  --bg: #0a0a0a;
  --bg-secondary: #141414;
  --card-bg: #1a1a1a;
  --border: rgba(255, 255, 255, 0.08);
}

/* Reset */
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

/* Main Layout */
.account-enterprise {
  width: 100%;
  min-height: 100vh;
  background: var(--bg);
  padding: 40px 0 80px 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
}

.account-container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 0 20px;
}

/* Header */
.account-header {
  text-align: center;
  margin-bottom: 60px;
  animation: fadeIn 0.6s ease;
}

.account-title {
  font-size: 48px;
  font-weight: 800;
  color: var(--text);
  margin: 0 0 12px 0;
  letter-spacing: -0.03em;
}

.account-subtitle {
  font-size: 20px;
  color: var(--text-secondary);
  margin: 0;
}

/* Tab Navigation */
.account-tabs {
  display: flex;
  gap: 4px;
  background: var(--bg-secondary);
  padding: 4px;
  border-radius: 16px;
  margin-bottom: 48px;
  box-shadow: var(--shadow-sm);
}

.tab-btn {
  flex: 1;
  padding: 18px 32px;
  background: transparent;
  border: none;
  border-radius: 12px;
  font-size: 16px;
  font-weight: 600;
  color: var(--text-secondary);
  cursor: pointer;
  transition: var(--transition);
  font-family: inherit;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
}

.tab-btn:hover {
  background: rgba(0, 154, 97, 0.08);
  color: var(--text);
}

.tab-btn.active {
  background: var(--primary);
  color: white;
  box-shadow: 0 4px 12px rgba(0, 154, 97, 0.3);
}

.tab-icon {
  width: 20px;
  height: 20px;
}

/* Tab Content */
.tab-content {
  display: none;
  animation: fadeIn 0.4s ease;
}

.tab-content.active {
  display: block;
}

/* Section Title */
.section-title {
  font-size: 32px;
  font-weight: 700;
  color: var(--text);
  margin: 0 0 40px 0;
  text-align: center;
}

/* eSIM Grid */
.esims-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
  gap: 28px;
  margin-bottom: 40px;
}

/* eSIM Card */
.esim-card {
  background: var(--card-bg);
  border: 2px solid var(--border);
  border-radius: var(--radius);
  padding: 28px;
  transition: var(--transition);
  position: relative;
  overflow: hidden;
  cursor: pointer;
}

.esim-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: var(--gradient);
  transform: translateX(-100%);
  transition: transform 0.3s ease;
}

.esim-card:hover::before {
  transform: translateX(0);
}

.esim-card:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-lg);
  border-color: var(--primary);
}

.esim-card.loading {
  pointer-events: none;
  opacity: 0.7;
}

/* eSIM Header */
.esim-header {
  display: flex;
  align-items: center;
  gap: 20px;
  margin-bottom: 24px;
}

.esim-icon {
  width: 56px;
  height: 56px;
  background: var(--gradient);
  border-radius: 14px;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: bold;
  font-size: 18px;
  flex-shrink: 0;
}

.esim-info {
  flex: 1;
  min-width: 0;
}

.esim-info h3 {
  font-size: 18px;
  font-weight: 700;
  color: var(--text);
  margin: 0 0 4px 0;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.esim-plan {
  font-size: 14px;
  color: var(--text-secondary);
  font-weight: 500;
}

/* eSIM Status */
.esim-status {
  display: inline-flex;
  align-items: center;
  gap: 6px;
  padding: 6px 12px;
  border-radius: 20px;
  font-size: 12px;
  font-weight: 600;
  margin-bottom: 20px;
}

.esim-status.active {
  background: rgba(0, 217, 126, 0.1);
  color: var(--success);
}

.esim-status.expired {
  background: rgba(255, 59, 48, 0.1);
  color: var(--danger);
}

.esim-status.pending {
  background: rgba(255, 154, 0, 0.1);
  color: var(--warning);
}

.status-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: currentColor;
  animation: pulse 2s infinite;
}

@keyframes pulse {
  0%, 100% { opacity: 1; }
  50% { opacity: 0.5; }
}

/* eSIM Details */
.esim-details {
  margin-bottom: 24px;
  padding: 16px;
  background: var(--bg-secondary);
  border-radius: 12px;
  display: none;
}

.esim-details.loaded {
  display: block;
  animation: slideDown 0.3s ease;
}

@keyframes slideDown {
  from {
    opacity: 0;
    max-height: 0;
  }
  to {
    opacity: 1;
    max-height: 500px;
  }
}

.detail-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 0;
}

.detail-row:not(:last-child) {
  border-bottom: 1px solid var(--border);
}

.detail-label {
  font-size: 14px;
  color: var(--text-secondary);
  font-weight: 500;
}

.detail-value {
  font-size: 14px;
  color: var(--text);
  font-weight: 600;
}

/* Data Usage Bar */
.usage-bar {
  margin: 20px 0;
}

.usage-header {
  display: flex;
  justify-content: space-between;
  margin-bottom: 8px;
}

.usage-label {
  font-size: 13px;
  color: var(--text-secondary);
}

.usage-value {
  font-size: 13px;
  font-weight: 700;
  color: var(--text);
}

.usage-track {
  height: 10px;
  background: var(--bg-secondary);
  border-radius: 20px;
  overflow: hidden;
}

.usage-fill {
  height: 100%;
  background: var(--gradient);
  border-radius: 20px;
  transition: width 1s ease;
}

/* Loading State */
.esim-loading {
  display: none;
  padding: 20px;
  text-align: center;
}

.esim-loading.active {
  display: block;
}

.spinner {
  display: inline-block;
  width: 32px;
  height: 32px;
  border: 3px solid rgba(0, 154, 97, 0.1);
  border-radius: 50%;
  border-top-color: var(--primary);
  animation: spin 1s ease-in-out infinite;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Modal for QR & Details */
.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  z-index: 10000;
  align-items: center;
  justify-content: center;
  backdrop-filter: blur(10px);
}

.modal.active {
  display: flex;
  animation: fadeIn 0.3s ease;
}

.modal-content {
  background: var(--card-bg);
  border-radius: var(--radius);
  padding: 40px;
  max-width: 600px;
  width: 90%;
  max-height: 90vh;
  overflow-y: auto;
  position: relative;
  box-shadow: var(--shadow-xl);
  animation: slideUp 0.3s ease;
}

@keyframes slideUp {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

.modal-close {
  position: absolute;
  top: 20px;
  right: 20px;
  width: 36px;
  height: 36px;
  background: rgba(0, 0, 0, 0.05);
  border: none;
  border-radius: 50%;
  font-size: 20px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--text);
  transition: var(--transition);
}

.modal-close:hover {
  background: rgba(255, 59, 48, 0.1);
  color: var(--danger);
  transform: rotate(90deg);
}

/* QR Code Section */
.qr-section {
  text-align: center;
  margin-bottom: 32px;
}

.qr-container {
  background: white;
  padding: 24px;
  border-radius: 16px;
  display: inline-block;
  box-shadow: var(--shadow-md);
}

.qr-code {
  width: 200px;
  height: 200px;
  image-rendering: crisp-edges;
}

.qr-label {
  font-size: 14px;
  color: var(--text-secondary);
  margin-top: 16px;
}

/* Buttons */
.btn {
  padding: 14px 28px;
  border-radius: 12px;
  font-size: 14px;
  font-weight: 700;
  text-align: center;
  cursor: pointer;
  transition: var(--transition);
  border: none;
  text-decoration: none;
  font-family: inherit;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
  width: 100%;
}

.btn-primary {
  background: var(--gradient);
  color: white;
  box-shadow: 0 4px 12px rgba(0, 154, 97, 0.25);
}

.btn-primary:hover {
  transform: translateY(-1px);
  box-shadow: var(--shadow-lg);
}

.btn-secondary {
  background: transparent;
  color: var(--primary);
  border: 2px solid var(--primary);
}

.btn-secondary:hover {
  background: var(--primary);
  color: white;
}

/* Forms */
.form-group {
  margin-bottom: 24px;
}

.form-label {
  display: block;
  font-size: 14px;
  font-weight: 600;
  color: var(--text);
  margin-bottom: 8px;
}

.form-input {
  width: 100%;
  padding: 14px 16px;
  background: var(--bg);
  border: 2px solid var(--border);
  border-radius: 12px;
  font-size: 15px;
  color: var(--text);
  font-family: inherit;
  transition: var(--transition);
}

.form-input:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 4px rgba(0, 154, 97, 0.1);
}

.form-input:disabled {
  background: var(--bg-secondary);
  cursor: not-allowed;
  opacity: 0.6;
}

/* Empty State */
.empty-state {
  text-align: center;
  padding: 80px 40px;
}

.empty-icon {
  width: 120px;
  height: 120px;
  margin: 0 auto 24px;
  background: var(--bg-secondary);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.empty-title {
  font-size: 24px;
  font-weight: 700;
  color: var(--text);
  margin: 0 0 12px 0;
}

.empty-text {
  font-size: 16px;
  color: var(--text-secondary);
  margin: 0 0 32px 0;
}

/* Alert Messages */
.alert {
  padding: 16px 20px;
  border-radius: 12px;
  margin-bottom: 24px;
  display: flex;
  align-items: center;
  gap: 12px;
  animation: slideDown 0.3s ease;
}

.alert-success {
  background: rgba(0, 217, 126, 0.1);
  color: var(--success);
  border: 1px solid rgba(0, 217, 126, 0.3);
}

.alert-error {
  background: rgba(255, 59, 48, 0.1);
  color: var(--danger);
  border: 1px solid rgba(255, 59, 48, 0.3);
}

.alert-info {
  background: rgba(0, 154, 97, 0.1);
  color: var(--primary);
  border: 1px solid rgba(0, 154, 97, 0.3);
}

/* Orders Table */
.orders-table {
  width: 100%;
  border-collapse: collapse;
  background: var(--card-bg);
  border-radius: var(--radius);
  overflow: hidden;
  box-shadow: var(--shadow-md);
}

.orders-table th {
  padding: 20px;
  text-align: left;
  font-size: 13px;
  font-weight: 700;
  color: var(--text);
  text-transform: uppercase;
  letter-spacing: 0.5px;
  background: var(--bg-secondary);
  border-bottom: 2px solid var(--border);
}

.orders-table td {
  padding: 20px;
  border-bottom: 1px solid var(--border);
  font-size: 15px;
  color: var(--text);
}

.orders-table tbody tr:last-child td {
  border-bottom: none;
}

.orders-table tbody tr:hover {
  background: var(--bg-secondary);
}

.order-number {
  color: var(--primary);
  font-weight: 700;
  text-decoration: none;
}

.order-number:hover {
  text-decoration: underline;
}

/* Settings Grid */
.settings-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
  gap: 32px;
  margin-bottom: 40px;
}

.settings-card {
  background: var(--card-bg);
  border: 2px solid var(--border);
  border-radius: var(--radius);
  padding: 32px;
  box-shadow: var(--shadow-md);
}

.settings-card h3 {
  font-size: 20px;
  font-weight: 700;
  color: var(--text);
  margin: 0 0 24px 0;
}

/* Mobile Responsive */
@media (max-width: 768px) {
  .account-title {
    font-size: 32px;
  }
  
  .account-tabs {
    gap: 2px;
    padding: 3px;
  }
  
  .tab-btn {
    padding: 14px 16px;
    font-size: 14px;
  }
  
  .esims-grid {
    grid-template-columns: 1fr;
    gap: 20px;
  }
  
  .settings-grid {
    grid-template-columns: 1fr;
  }
  
  .modal-content {
    padding: 24px;
  }
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}
</style>

<!-- Main HTML -->
<div class="account-enterprise">
  <div class="account-container">
    
    <!-- Header -->
    <div class="account-header">
      <h1 class="account-title">
        Welcome back, {{ customer.first_name | default: customer.email | split: '@' | first }}!
      </h1>
      <p class="account-subtitle">Manage your eSIMs and account settings</p>
    </div>
    
    <!-- Tab Navigation -->
    <div class="account-tabs">
      <button class="tab-btn active" onclick="switchTab('esims', this)">
        <svg class="tab-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M10 2v8.5a.5.5 0 01-.5.5h-6a.5.5 0 01-.5-.5V2M10 13v8.5a.5.5 0 01-.5.5h-6a.5.5 0 01-.5-.5V13M21 2v8.5a.5.5 0 01-.5.5h-6a.5.5 0 01-.5-.5V2M21 13v8.5a.5.5 0 01-.5.5h-6a.5.5 0 01-.5-.5V13M7 6h0M18 6h0M7 17h0M18 17h0"/>
        </svg>
        <span>My eSIMs</span>
      </button>
      <button class="tab-btn" onclick="switchTab('orders', this)">
        <svg class="tab-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M16 3H5a2 2 0 00-2 2v14a2 2 0 002 2h14a2 2 0 002-2V8l-5-5z"/>
          <path d="M15 3v5h5M9 11h6M9 15h6"/>
        </svg>
        <span>Orders</span>
      </button>
      <button class="tab-btn" onclick="switchTab('settings', this)">
        <svg class="tab-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"/>
          <circle cx="12" cy="12" r="3"/>
        </svg>
        <span>Settings</span>
      </button>
    </div>
    
    <!-- eSIMs Tab -->
    <div id="esims-tab" class="tab-content active">
      
      <!-- Alert for API Status -->
      <div id="api-alert" style="display: none;"></div>
      
      <!-- eSIM Grid -->
      <div class="esims-grid" id="esims-grid">
        {% for order in customer.orders %}
          {% assign show_order = false %}
          {% for line_item in order.line_items %}
            {% if line_item.product.type == 'eSIM' or line_item.product.type == 'esim' or line_item.product.title contains 'eSIM' or line_item.product.title contains 'esim' or line_item.sku contains 'ESIM' %}
              {% assign show_order = true %}
              {% break %}
            {% endif %}
          {% endfor %}
          
          {% if show_order %}
            {% for line_item in order.line_items %}
              {% if line_item.product.type == 'eSIM' or line_item.product.type == 'esim' or line_item.product.title contains 'eSIM' or line_item.product.title contains 'esim' or line_item.sku contains 'ESIM' %}
                <div class="esim-card" data-order="{{ order.name | remove: '#' }}" id="card-{{ order.name | remove: '#' }}">
                  
                  <!-- Card Header -->
                  <div class="esim-header">
                    <div class="esim-icon">
                      {% assign country_code = line_item.product.title | split: ' ' | first | upcase | slice: 0, 2 %}
                      {{ country_code | default: 'ES' }}
                    </div>
                    <div class="esim-info">
                      <h3>{{ line_item.product.title | default: 'eSIM Package' }}</h3>
                      <p class="esim-plan">{{ line_item.variant.title | default: 'Data Plan' }}</p>
                    </div>
                  </div>
                  
                  <!-- Order Info -->
                  <div class="esim-status pending" id="status-{{ order.name | remove: '#' }}">
                    <span class="status-dot"></span>
                    <span>Loading...</span>
                  </div>
                  
                  <!-- Details Section (Hidden initially) -->
                  <div class="esim-details" id="details-{{ order.name | remove: '#' }}">
                    <!-- Will be populated by API -->
                  </div>
                  
                  <!-- Loading State -->
                  <div class="esim-loading" id="loading-{{ order.name | remove: '#' }}">
                    <div class="spinner"></div>
                    <p style="margin-top: 12px; font-size: 14px; color: var(--text-secondary);">Loading eSIM data...</p>
                  </div>
                  
                  <!-- Action Button -->
                  <button class="btn btn-primary" id="btn-{{ order.name | remove: '#' }}" data-order="{{ order.name | remove: '#' }}">
                    <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 6px;">
                      <path d="M3 3h7v7H3zM14 3h7v7h-7zM14 14h7v7h-7zM3 14h7v7H3z"/>
                      <path d="M7 7h0M7 17h0M17 7h0M17 17h0"/>
                    </svg>
                    View Details & QR Code
                  </button>
                  
                </div>
              {% endif %}
            {% endfor %}
          {% else %}
            <!-- Show ALL orders as potential eSIMs if no specific eSIM products found -->
            <div class="esim-card" data-order="{{ order.name | remove: '#' }}" id="card-{{ order.name | remove: '#' }}">
              
              <!-- Card Header -->
              <div class="esim-header">
                <div class="esim-icon">
                  {% assign country_code = order.line_items.first.product.title | split: ' ' | first | upcase | slice: 0, 2 %}
                  {{ country_code | default: 'ES' }}
                </div>
                <div class="esim-info">
                  <h3>{{ order.line_items.first.product.title | default: 'Product' }}</h3>
                  <p class="esim-plan">{{ order.line_items.first.variant.title | default: order.name }}</p>
                </div>
              </div>
              
              <!-- Order Info -->
              <div class="esim-status pending" id="status-{{ order.name | remove: '#' }}">
                <span class="status-dot"></span>
                <span>Checking...</span>
              </div>
              
              <!-- Details Section (Hidden initially) -->
              <div class="esim-details" id="details-{{ order.name | remove: '#' }}">
                <!-- Will be populated by API -->
              </div>
              
              <!-- Loading State -->
              <div class="esim-loading" id="loading-{{ order.name | remove: '#' }}">
                <div class="spinner"></div>
                <p style="margin-top: 12px; font-size: 14px; color: var(--text-secondary);">Checking order...</p>
              </div>
              
              <!-- Action Button -->
              <button class="btn btn-primary" id="btn-{{ order.name | remove: '#' }}" data-order="{{ order.name | remove: '#' }}">
                <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round" style="margin-right: 6px;">
                  <path d="M3 3h7v7H3zM14 3h7v7h-7zM14 14h7v7h-7zM3 14h7v7H3z"/>
                  <path d="M7 7h0M7 17h0M17 7h0M17 17h0"/>
                </svg>
                Check eSIM Status
              </button>
              
            </div>
          {% endif %}
        {% endfor %}
      </div>
      
      <!-- Empty State if no orders at all -->
      {% if customer.orders.size == 0 %}
        <div class="empty-state">
          <div class="empty-icon">
            <svg width="60" height="60" viewBox="0 0 24 24" fill="none" stroke="var(--primary)" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round">
              <path d="M10 2v8.5a.5.5 0 01-.5.5h-6a.5.5 0 01-.5-.5V2a1 1 0 011-1h5a1 1 0 011 1zM10 13v8.5a.5.5 0 01-.5.5h-6a.5.5 0 01-.5-.5V13a1 1 0 011-1h5a1 1 0 011 1zM21 2v8.5a.5.5 0 01-.5.5h-6a.5.5 0 01-.5-.5V2a1 1 0 011-1h5a1 1 0 011 1zM21 13v8.5a.5.5 0 01-.5.5h-6a.5.5 0 01-.5-.5V13a1 1 0 011-1h5a1 1 0 011 1z"/>
              <circle cx="7" cy="6" r="1" fill="var(--primary)"/>
              <circle cx="18" cy="6" r="1" fill="var(--primary)"/>
              <circle cx="7" cy="17" r="1" fill="var(--primary)"/>
              <circle cx="18" cy="17" r="1" fill="var(--primary)"/>
            </svg>
          </div>
          <h3 class="empty-title">No eSIMs Yet</h3>
          <p class="empty-text">Start your journey with instant connectivity worldwide</p>
          <a href="/collections/all" class="btn btn-primary" style="display: inline-flex; width: auto; padding: 16px 40px;">
            Browse eSIM Plans
          </a>
        </div>
      {% endif %}
      
    </div>
    
    <!-- Orders Tab -->
    <div id="orders-tab" class="tab-content">
      {% if customer.orders.size > 0 %}
        <table class="orders-table">
          <thead>
            <tr>
              <th>Order</th>
              <th>Date</th>
              <th>Status</th>
              <th>Total</th>
            </tr>
          </thead>
          <tbody>
            {% for order in customer.orders %}
              <tr>
                <td><a href="{{ order.customer_url }}" class="order-number">{{ order.name }}</a></td>
                <td>{{ order.created_at | date: "%B %d, %Y" }}</td>
                <td>{{ order.fulfillment_status_label | default: 'Delivered' }}</td>
                <td><strong>{{ order.total_price | money }}</strong></td>
              </tr>
            {% endfor %}
          </tbody>
        </table>
      {% else %}
        <div class="empty-state">
          <h3 class="empty-title">No Orders Yet</h3>
          <p class="empty-text">Your order history will appear here</p>
        </div>
      {% endif %}
    </div>
    
    <!-- Settings Tab -->
    <div id="settings-tab" class="tab-content">
      
      <h2 class="section-title">Account Settings</h2>
      
      <div class="settings-grid">
        
        <!-- Personal Information -->
        <div class="settings-card">
          <h3>Personal Information</h3>
          
          <form method="post" action="{{ routes.account_url }}" accept-charset="UTF-8">
            <input type="hidden" name="form_type" value="customer">
            <input type="hidden" name="utf8" value="✓">
            
            <div class="form-group">
              <label class="form-label" for="CustomerFirstName">First Name</label>
              <input type="text" 
                     name="customer[first_name]" 
                     id="CustomerFirstName"
                     value="{{ customer.first_name }}"
                     class="form-input">
            </div>
            
            <div class="form-group">
              <label class="form-label" for="CustomerLastName">Last Name</label>
              <input type="text" 
                     name="customer[last_name]" 
                     id="CustomerLastName"
                     value="{{ customer.last_name }}"
                     class="form-input">
            </div>
            
            <div class="form-group">
              <label class="form-label" for="CustomerEmail">Email Address</label>
              <input type="email" 
                     name="customer[email]" 
                     id="CustomerEmail"
                     value="{{ customer.email }}"
                     class="form-input">
            </div>
            
            <div class="form-group">
              <label class="form-label" for="CustomerPhone">Phone Number</label>
              <input type="tel" 
                     name="customer[phone]" 
                     id="CustomerPhone"
                     value="{{ customer.phone }}"
                     placeholder="+1234567890"
                     class="form-input">
            </div>
            
            <button type="submit" class="btn btn-primary">Save Changes</button>
          </form>
          
        </div>
        
        <!-- Password & Security -->
        <div class="settings-card">
          <h3>Password & Security</h3>
          
          <form method="post" action="{{ routes.account_url }}" accept-charset="UTF-8">
            <input type="hidden" name="form_type" value="customer_password">
            <input type="hidden" name="utf8" value="✓">
            
            <div class="form-group">
              <label class="form-label" for="CurrentPassword">Current Password</label>
              <input type="password" 
                     name="customer[password]" 
                     id="CurrentPassword"
                     class="form-input"
                     placeholder="Enter current password">
            </div>
            
            <div class="form-group">
              <label class="form-label" for="NewPassword">New Password</label>
              <input type="password" 
                     name="customer[password_new]" 
                     id="NewPassword"
                     class="form-input"
                     placeholder="Enter new password">
            </div>
            
            <div class="form-group">
              <label class="form-label" for="ConfirmPassword">Confirm New Password</label>
              <input type="password" 
                     name="customer[password_confirmation]" 
                     id="ConfirmPassword"
                     class="form-input"
                     placeholder="Confirm new password">
            </div>
            
            <button type="submit" class="btn btn-primary">Update Password</button>
          </form>
          
        </div>
        
        <!-- Addresses -->
        <div class="settings-card">
          <h3>Addresses</h3>
          
          {% if customer.addresses.size > 0 %}
            {% for address in customer.addresses %}
              <div style="padding: 16px; background: var(--bg-secondary); border-radius: 12px; margin-bottom: 16px;">
                <p style="font-weight: 600; margin-bottom: 8px;">{{ address.name }}</p>
                <p style="font-size: 14px; color: var(--text-secondary); line-height: 1.6;">
                  {{ address.address1 }}<br>
                  {% if address.address2 != blank %}{{ address.address2 }}<br>{% endif %}
                  {{ address.city }}, {{ address.province }} {{ address.zip }}<br>
                  {{ address.country }}
                </p>
              </div>
            {% endfor %}
          {% else %}
            <p style="color: var(--text-secondary); margin-bottom: 20px;">No addresses saved yet</p>
          {% endif %}
          
          <a href="{{ routes.account_addresses_url }}" class="btn btn-secondary">
            Manage Addresses
          </a>
        </div>
        
        <!-- Account Actions -->
        <div class="settings-card">
          <h3>Account Actions</h3>
          
          <p style="color: var(--text-secondary); margin-bottom: 24px;">
            Member since {{ customer.created_at | date: "%B %Y" }}
          </p>
          
          <div style="display: grid; gap: 12px;">
            <a href="{{ routes.account_logout_url }}" class="btn btn-secondary" style="border-color: var(--danger); color: var(--danger);">
              Sign Out
            </a>
          </div>
        </div>
        
      </div>
      
    </div>
    
  </div>
</div>

<!-- Modal for eSIM Details -->
<div id="esimModal" class="modal">
  <div class="modal-content">
    <button class="modal-close" onclick="closeModal()">×</button>
    
    <div id="modal-loading" style="text-align: center; padding: 40px;">
      <div class="spinner"></div>
      <p style="margin-top: 16px; color: var(--text-secondary);">Loading eSIM details...</p>
    </div>
    
    <div id="modal-content" style="display: none;">
      <!-- Will be populated dynamically -->
    </div>
  </div>
</div>

<!-- Main JavaScript -->
<script>
// Global Variables
let esimCache = new Map();
let loadingStates = new Map();
let currentModalOrder = null;

// Initialize on DOM ready
document.addEventListener('DOMContentLoaded', function() {
  console.log('DOM Content Loaded - Starting Account Page');
  initAccount();
});

// Also try on window load as backup
window.addEventListener('load', function() {
  console.log('Window Loaded - Checking if account initialized');
  if (!window.esimCache) {
    console.log('Account not initialized, starting now');
    initAccount();
  }
});

function initAccount() {
  // Make sure jQuery is loaded
  if (typeof jQuery === 'undefined') {
    console.warn('jQuery not loaded, retrying...');
    setTimeout(initAccount, 500);
    return;
  }
  
  const $ = jQuery;
  console.log('Account page initialized with jQuery version:', $.fn.jquery);
  
  // Configuration
  const API_BASE = 'https://simbye.com/apps/topup/info/';
  const CUSTOMER_EMAIL = '{{ customer.email }}';
  const MAX_RETRIES = 2;
  
  console.log('API Configuration:', {
    base: API_BASE,
    customerEmail: CUSTOMER_EMAIL,
    ordersFound: document.querySelectorAll('.esim-card').length
  });
  
  // Bind button clicks for each eSIM card - IMPROVED
  document.querySelectorAll('.esim-card').forEach(card => {
    const orderNumber = card.dataset.order;
    if (orderNumber) {
      console.log('Found eSIM card for order:', orderNumber);
      
      // Find button and bind click
      const button = document.getElementById(`btn-${orderNumber}`);
      if (button) {
        // Remove any existing onclick
        button.onclick = null;
        // Add new click handler
        button.addEventListener('click', function(e) {
          e.preventDefault();
          e.stopPropagation();
          console.log('Opening modal for order:', orderNumber);
          openModal(orderNumber);
        });
      }
      
      // Auto-load data on page load with staggered timing
      setTimeout(() => {
        loadEsimData(orderNumber, card);
      }, 200);  // Load all quickly
    }
  });
  
  // If no cards found, show message
  if (document.querySelectorAll('.esim-card').length === 0) {
    console.log('No eSIM cards found on page');
  }
  
  // Load eSIM Data via API
  function loadEsimData(orderNumber, cardElement, retryCount = 0) {
    // Check cache first
    if (esimCache.has(orderNumber)) {
      displayCardData(orderNumber, esimCache.get(orderNumber), cardElement);
      return;
    }
    
    // Prevent duplicate requests
    if (loadingStates.get(orderNumber)) return;
    loadingStates.set(orderNumber, true);
    
    // Show loading state
    const loadingEl = document.getElementById(`loading-${orderNumber}`);
    if (loadingEl) loadingEl.classList.add('active');
    
    // Make API call with jQuery - TRY MULTIPLE ENDPOINTS
    const apiUrls = [
      API_BASE + orderNumber,
      'https://simbye.com/apps/topup/info/' + orderNumber,
      '/apps/topup/info/' + orderNumber
    ];
    
    let tryUrl = function(index) {
      if (index >= apiUrls.length) {
        console.log(`All API attempts failed for ${orderNumber}`);
        showBasicCard(orderNumber, cardElement);
        loadingStates.set(orderNumber, false);
        return;
      }
      
      $.ajax({
        url: apiUrls[index],
        type: 'GET',
        dataType: 'json',
        timeout: 15000,
        success: function(response) {
          console.log(`Success for order ${orderNumber} with URL ${apiUrls[index]}:`, response);
          
          if (response.status === 'success' && response.data?.obj?.esimList?.length > 0) {
            const esimData = response.data.obj.esimList[0];
            
            // Add order number to data
            esimData.orderNumber = orderNumber;
            
            // Verify email matches
            if (response.data.obj.email && response.data.obj.email.toLowerCase() === CUSTOMER_EMAIL.toLowerCase()) {
              esimData.verified = true;
            } else {
              esimData.verified = false;
              console.warn(`Email mismatch for order ${orderNumber}`);
            }
            
            // Cache the data
            esimCache.set(orderNumber, esimData);
            
            // Display on card
            displayCardData(orderNumber, esimData, cardElement);
            
          } else {
            // NO DATA FROM API - Show card anyway with basic info
            console.log(`No API data for ${orderNumber}, showing basic info`);
            showBasicCard(orderNumber, cardElement);
          }
          
          loadingStates.set(orderNumber, false);
        },
        error: function(xhr, status, error) {
          console.warn(`API attempt ${index + 1} failed for ${orderNumber}:`, error);
          // Try next URL
          tryUrl(index + 1);
        }
      });
    };
    
    // Start with first URL
    tryUrl(0);
  }
  
  // Show basic card when API fails
  function showBasicCard(orderNumber, cardElement) {
    // Hide loading
    const loadingEl = document.getElementById(`loading-${orderNumber}`);
    if (loadingEl) loadingEl.classList.remove('active');
    
    // Update status to show it's ready to view
    const statusEl = document.getElementById(`status-${orderNumber}`);
    if (statusEl) {
      statusEl.className = 'esim-status active';
      statusEl.innerHTML = `<span class="status-dot"></span><span>View Details</span>`;
    }
    
    // Show basic details
    const detailsEl = document.getElementById(`details-${orderNumber}`);
    if (detailsEl) {
      detailsEl.innerHTML = `
        <div class="detail-row">
          <span class="detail-label">Order Number</span>
          <span class="detail-value">#${orderNumber}</span>
        </div>
        <div class="detail-row">
          <span class="detail-label">Status</span>
          <span class="detail-value">Click to check details</span>
        </div>
      `;
      detailsEl.classList.add('loaded');
    }
  }
  
  // Display eSIM data on card
  function displayCardData(orderNumber, esimData, cardElement) {
    // Hide loading
    const loadingEl = document.getElementById(`loading-${orderNumber}`);
    if (loadingEl) loadingEl.classList.remove('active');
    
    // Update status
    const statusEl = document.getElementById(`status-${orderNumber}`);
    if (statusEl) {
      const status = getEsimStatus(esimData);
      statusEl.className = `esim-status ${status.class}`;
      statusEl.innerHTML = `<span class="status-dot"></span><span>${status.text}</span>`;
    }
    
    // Update details
    const detailsEl = document.getElementById(`details-${orderNumber}`);
    if (detailsEl && esimData.totalVolume) {
      const totalGB = (esimData.totalVolume / 1073741824).toFixed(2);
      const usedGB = (esimData.orderUsage / 1073741824).toFixed(2);
      const percent = Math.min(100, Math.round((esimData.orderUsage / esimData.totalVolume) * 100));
      
      detailsEl.innerHTML = `
        <div class="detail-row">
          <span class="detail-label">Order Number</span>
          <span class="detail-value">#${orderNumber}</span>
        </div>
        ${esimData.iccid ? `
        <div class="detail-row">
          <span class="detail-label">ICCID</span>
          <span class="detail-value">${formatIccid(esimData.iccid)}</span>
        </div>` : ''}
        ${esimData.expiredTime ? `
        <div class="detail-row">
          <span class="detail-label">Expires</span>
          <span class="detail-value">${new Date(esimData.expiredTime).toLocaleDateString()}</span>
        </div>` : ''}
        <div class="usage-bar">
          <div class="usage-header">
            <span class="usage-label">Data Usage</span>
            <span class="usage-value">${usedGB}GB / ${totalGB}GB</span>
          </div>
          <div class="usage-track">
            <div class="usage-fill" style="width: ${percent}%;"></div>
          </div>
        </div>
      `;
      
      detailsEl.classList.add('loaded');
    }
  }
  
  // Get eSIM Status
  function getEsimStatus(esimData) {
    if (!esimData) return { text: 'Unknown', class: 'pending' };
    
    // Check if expired
    if (esimData.expiredTime) {
      const expiry = new Date(esimData.expiredTime);
      if (expiry < new Date()) {
        return { text: 'Expired', class: 'expired' };
      }
    }
    
    // Check status
    switch(esimData.esimStatus) {
      case 'IN_USE':
        return { text: 'Active', class: 'active' };
      case 'NEW':
        return { text: 'Ready to Use', class: 'active' };
      case 'USEDUP':
        return { text: 'Used Up', class: 'expired' };
      default:
        return { text: 'Active', class: 'active' };
    }
  }
  
  // Format ICCID
  function formatIccid(iccid) {
    if (!iccid) return '';
    const str = String(iccid);
    return str.slice(0, 6) + '****' + str.slice(-4);
  }
  
  // Make functions available globally
  window.loadEsimData = loadEsimData;
  window.esimCache = esimCache;
  window.getEsimStatus = getEsimStatus;
  window.showBasicCard = showBasicCard;
  window.formatIccid = formatIccid;
  window.displayCardData = displayCardData;
}

// Open Modal with full details
function openModal(orderNumber) {
  if (typeof jQuery === 'undefined') {
    console.error('jQuery not available for modal');
    return;
  }
  
  const modal = document.getElementById('esimModal');
  modal.classList.add('active');
  currentModalOrder = orderNumber;
  
  // Show loading
  document.getElementById('modal-loading').style.display = 'block';
  document.getElementById('modal-content').style.display = 'none';
  
  // Get data from cache or load
  if (esimCache.has(orderNumber)) {
    displayModalContent(orderNumber, esimCache.get(orderNumber));
  } else {
    // Load fresh data with jQuery
    jQuery.ajax({
      url: 'https://simbye.com/apps/topup/info/' + orderNumber,
      type: 'GET',
      dataType: 'json',
      success: function(response) {
        if (response.status === 'success' && response.data?.obj?.esimList?.length > 0) {
          const esimData = response.data.obj.esimList[0];
          esimCache.set(orderNumber, esimData);
          displayModalContent(orderNumber, esimData);
        } else {
          showModalError('No eSIM data found');
        }
      },
      error: function() {
        showModalError('Failed to load eSIM details');
      }
    });
  }
}

// Display modal content
function displayModalContent(orderNumber, esimData) {
  const packageName = esimData.packageList?.[0]?.packageName || 'eSIM Package';
  const totalGB = esimData.totalVolume ? (esimData.totalVolume / 1073741824).toFixed(2) : 'N/A';
  const usedGB = esimData.orderUsage ? (esimData.orderUsage / 1073741824).toFixed(2) : '0';
  const status = window.getEsimStatus(esimData);
  
  const modalContent = `
    <div style="text-align: center; margin-bottom: 32px;">
      <h2 style="font-size: 28px; font-weight: 700; margin-bottom: 8px; color: var(--text);">
        ${packageName}
      </h2>
      <p style="color: var(--text-secondary);">Order #${orderNumber}</p>
      <div class="esim-status ${status.class}" style="display: inline-flex; margin-top: 12px;">
        <span class="status-dot"></span>
        <span>${status.text}</span>
      </div>
    </div>
    
    ${esimData.qrCodeUrl ? `
    <div class="qr-section">
      <div class="qr-container">
        <img src="${esimData.qrCodeUrl}" alt="QR Code" class="qr-code">
        <p class="qr-label">Scan to install eSIM</p>
      </div>
    </div>` : ''}
    
    <div style="background: var(--bg-secondary); border-radius: 12px; padding: 20px; margin-bottom: 24px;">
      ${esimData.iccid ? `
      <div class="detail-row">
        <span class="detail-label">ICCID</span>
        <span class="detail-value">${esimData.iccid}</span>
      </div>` : ''}
      
      ${esimData.totalVolume ? `
      <div class="detail-row">
        <span class="detail-label">Total Data</span>
        <span class="detail-value">${totalGB} GB</span>
      </div>
      <div class="detail-row">
        <span class="detail-label">Data Used</span>
        <span class="detail-value">${usedGB} GB</span>
      </div>` : ''}
      
      ${esimData.expiredTime ? `
      <div class="detail-row">
        <span class="detail-label">Expires</span>
        <span class="detail-value">${new Date(esimData.expiredTime).toLocaleDateString('en-US', {
          year: 'numeric', month: 'long', day: 'numeric'
        })}</span>
      </div>` : ''}
    </div>
    
    <div style="display: grid; gap: 12px;">
      ${esimData.qrCodeUrl ? `
      <button class="btn btn-primary" onclick="downloadQR('${esimData.qrCodeUrl}', '${orderNumber}')">
        Download QR Code
      </button>` : ''}
      
      ${canTopUp(esimData) ? `
      <a href="/pages/check-esim?order_number=${orderNumber}" class="btn btn-secondary">
        Top Up Data
      </a>` : ''}
      
      <button class="btn btn-secondary" onclick="closeModal()">
        Close
      </button>
    </div>
  `;
  
  document.getElementById('modal-loading').style.display = 'none';
  document.getElementById('modal-content').innerHTML = modalContent;
  document.getElementById('modal-content').style.display = 'block';
}

// Show modal error
function showModalError(message) {
  document.getElementById('modal-loading').style.display = 'none';
  document.getElementById('modal-content').innerHTML = `
    <div style="text-align: center; padding: 40px;">
      <p style="color: var(--danger); font-size: 16px; margin-bottom: 24px;">${message}</p>
      <button class="btn btn-primary" onclick="closeModal()">Close</button>
    </div>
  `;
  document.getElementById('modal-content').style.display = 'block';
}

// Check if can top up
function canTopUp(esimData) {
  // No top-up for daily/unlimited plans
  const packageName = esimData.packageList?.[0]?.packageName || '';
  if (packageName.toLowerCase().includes('daily') || 
      packageName.toLowerCase().includes('unlimited')) {
    return false;
  }
  
  // No top-up if expired
  const status = window.getEsimStatus(esimData);
  if (status.class === 'expired') {
    return false;
  }
  
  return true;
}

// Download QR Code
function downloadQR(qrUrl, orderNumber) {
  const link = document.createElement('a');
  link.href = qrUrl;
  link.download = `esim-qr-${orderNumber}.png`;
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
}

// Close Modal
function closeModal() {
  document.getElementById('esimModal').classList.remove('active');
  currentModalOrder = null;
}

// Tab switching
function switchTab(tab, button) {
  // Hide all tabs
  document.querySelectorAll('.tab-content').forEach(el => {
    el.classList.remove('active');
  });
  
  // Remove active from buttons
  document.querySelectorAll('.tab-btn').forEach(btn => {
    btn.classList.remove('active');
  });
  
  // Show selected tab
  document.getElementById(`${tab}-tab`).classList.add('active');
  
  // Set button active
  button.classList.add('active');
}

// Close modal on ESC
document.addEventListener('keydown', function(e) {
  if (e.key === 'Escape') {
    closeModal();
  }
});

// Close modal on outside click
document.getElementById('esimModal')?.addEventListener('click', function(e) {
  if (e.target === this) {
    closeModal();
  }
});
</script>