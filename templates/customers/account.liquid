<!-- templates/customers/account.liquid -->
<!-- SIMBYE ENTERPRISE ACCOUNT - COMPLETE WITH EVERYTHING -->

<style>
/* ============================================
   SIMBYE ENTERPRISE ACCOUNT - FINAL
   ============================================ */

:root {
  --primary: #009a61;
  --primary-hover: #00824f;
  --primary-light: rgba(0, 154, 97, 0.1);
  --success: #00d97e;
  --warning: #ff9a00;
  --danger: #ff3b30;
  --text: #1a1a1a;
  --text-secondary: #666666;
  --bg: #ffffff;
  --bg-secondary: #f8f9fa;
  --card-bg: #ffffff;
  --border: rgba(0, 0, 0, 0.08);
  --shadow-sm: 0 4px 12px rgba(0, 0, 0, 0.06);
  --shadow-md: 0 8px 24px rgba(0, 0, 0, 0.08);
  --shadow-lg: 0 12px 32px rgba(0, 154, 97, 0.15);
  --gradient: linear-gradient(135deg, #009a61 0%, #00d97e 100%);
  --radius: 20px;
  --transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

[data-theme="dark"] {
  --text: #f5f5f5;
  --text-secondary: #b0b0b0;
  --bg: #0a0a0a;
  --bg-secondary: #141414;
  --card-bg: #1a1a1a;
  --border: rgba(255, 255, 255, 0.08);
}

/* Layout */
.account-enterprise {
  width: 100%;
  min-height: 100vh;
  background: var(--bg);
  padding: 40px 0 80px 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', system-ui, sans-serif;
}

.account-container {
  max-width: 1400px;
  margin: 0 auto;
  padding: 0 20px;
}

/* Header */
.account-header {
  text-align: center;
  margin-bottom: 60px;
  animation: fadeIn 0.6s ease;
}

.account-title {
  font-size: 48px;
  font-weight: 800;
  color: var(--text);
  margin: 0 0 12px 0;
  letter-spacing: -0.03em;
}

.account-subtitle {
  font-size: 20px;
  color: var(--text-secondary);
  margin: 0;
}

/* Tab Navigation */
.account-tabs {
  display: flex;
  gap: 4px;
  background: var(--bg-secondary);
  padding: 4px;
  border-radius: 16px;
  margin-bottom: 48px;
  box-shadow: var(--shadow-sm);
}

.tab-btn {
  flex: 1;
  padding: 18px 32px;
  background: transparent;
  border: none;
  border-radius: 12px;
  font-size: 16px;
  font-weight: 600;
  color: var(--text-secondary);
  cursor: pointer;
  transition: var(--transition);
  font-family: inherit;
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 10px;
}

.tab-btn:hover {
  background: rgba(0, 154, 97, 0.08);
  color: var(--text);
}

.tab-btn.active {
  background: var(--primary);
  color: white;
  box-shadow: 0 4px 12px rgba(0, 154, 97, 0.3);
}

/* Tab Content */
.tab-content {
  display: none;
  animation: fadeIn 0.4s ease;
}

.tab-content.active {
  display: block;
}

/* Section Title */
.section-title {
  font-size: 32px;
  font-weight: 700;
  color: var(--text);
  margin: 0 0 40px 0;
  text-align: center;
}

/* eSIM Grid */
.esims-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(380px, 1fr));
  gap: 28px;
  margin-bottom: 40px;
}

/* Enhanced eSIM Card */
.esim-card {
  background: var(--card-bg);
  border: 2px solid var(--border);
  border-radius: var(--radius);
  padding: 0;
  transition: var(--transition);
  position: relative;
  overflow: hidden;
  cursor: pointer;
}

.esim-card::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: var(--gradient);
}

.esim-card:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-lg);
  border-color: var(--primary);
}

.esim-card.loading {
  pointer-events: none;
  opacity: 0.7;
}

/* Card Header */
.esim-card-header {
  padding: 24px;
  background: linear-gradient(135deg, var(--primary) 0%, var(--primary-hover) 100%);
  color: white;
}

.esim-card-title {
  font-size: 20px;
  font-weight: 700;
  margin: 0 0 8px 0;
}

.esim-card-subtitle {
  font-size: 14px;
  opacity: 0.9;
}

/* Card Body */
.esim-card-body {
  padding: 24px;
}

.esim-quick-info {
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  gap: 16px;
  margin-bottom: 20px;
}

.info-item {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.info-label {
  font-size: 12px;
  color: var(--text-secondary);
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.info-value {
  font-size: 16px;
  color: var(--text);
  font-weight: 600;
}

/* Status Badge */
.status-badge {
  display: inline-block;
  padding: 6px 14px;
  border-radius: 100px;
  font-size: 12px;
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.status-badge.active {
  background: rgba(0, 217, 126, 0.1);
  color: var(--success);
}

.status-badge.expired {
  background: rgba(255, 59, 48, 0.1);
  color: var(--danger);
}

.status-badge.new {
  background: rgba(255, 154, 0, 0.1);
  color: var(--warning);
}

/* Data Usage Bar */
.usage-bar-container {
  margin-bottom: 20px;
}

.usage-bar-header {
  display: flex;
  justify-content: space-between;
  margin-bottom: 8px;
  font-size: 14px;
}

.usage-bar {
  height: 8px;
  background: var(--bg-secondary);
  border-radius: 100px;
  overflow: hidden;
}

.usage-fill {
  height: 100%;
  background: var(--gradient);
  border-radius: 100px;
  transition: width 1s ease;
}

/* Card Actions */
.esim-card-actions {
  display: flex;
  gap: 12px;
  padding-top: 20px;
  border-top: 1px solid var(--border);
}

.btn {
  flex: 1;
  padding: 14px 20px;
  border-radius: 12px;
  font-size: 14px;
  font-weight: 700;
  text-align: center;
  cursor: pointer;
  transition: var(--transition);
  border: none;
  text-decoration: none;
  font-family: inherit;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: 8px;
}

.btn-primary {
  background: var(--gradient);
  color: white;
  box-shadow: 0 4px 12px rgba(0, 154, 97, 0.25);
}

.btn-primary:hover {
  transform: translateY(-1px);
  box-shadow: var(--shadow-lg);
}

.btn-secondary {
  background: transparent;
  color: var(--primary);
  border: 2px solid var(--primary);
}

.btn-secondary:hover {
  background: var(--primary);
  color: white;
}

/* Detail Modal */
.esim-detail-modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.8);
  z-index: 10000;
  align-items: center;
  justify-content: center;
  backdrop-filter: blur(10px);
}

.esim-detail-modal.active {
  display: flex;
}

.modal-content {
  background: var(--card-bg);
  border-radius: var(--radius);
  padding: 0;
  max-width: 600px;
  width: 90%;
  max-height: 90vh;
  overflow-y: auto;
  position: relative;
  box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
  animation: slideUp 0.3s ease;
}

@keyframes slideUp {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

.modal-header {
  padding: 32px;
  background: linear-gradient(135deg, var(--primary) 0%, var(--primary-hover) 100%);
  color: white;
  text-align: center;
  position: relative;
}

.modal-close {
  position: absolute;
  top: 20px;
  right: 20px;
  width: 40px;
  height: 40px;
  background: rgba(255, 255, 255, 0.2);
  border: none;
  border-radius: 50%;
  font-size: 24px;
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  transition: var(--transition);
}

.modal-close:hover {
  background: rgba(255, 255, 255, 0.3);
  transform: rotate(90deg);
}

.modal-body {
  padding: 32px;
}

/* QR Code Section */
.qr-section {
  text-align: center;
  margin-bottom: 32px;
  padding: 24px;
  background: var(--bg-secondary);
  border-radius: 16px;
}

.qr-code {
  width: 200px;
  height: 200px;
  margin: 0 auto 16px;
  border-radius: 12px;
  border: 2px solid var(--border);
}

.qr-actions {
  display: flex;
  gap: 12px;
  justify-content: center;
  margin-top: 16px;
}

/* Detail Grid */
.detail-grid {
  display: grid;
  gap: 20px;
  margin-bottom: 24px;
}

.detail-item {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 12px 0;
  border-bottom: 1px solid var(--border);
}

.detail-label {
  font-size: 14px;
  color: var(--text-secondary);
  font-weight: 500;
}

.detail-value {
  font-size: 14px;
  color: var(--text);
  font-weight: 600;
  text-align: right;
}

/* Loading Spinner */
.loading-spinner {
  width: 40px;
  height: 40px;
  border: 3px solid rgba(0, 154, 97, 0.1);
  border-radius: 50%;
  border-top-color: var(--primary);
  animation: spin 1s ease-in-out infinite;
  margin: 20px auto;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Empty State */
.empty-state {
  text-align: center;
  padding: 80px 20px;
  background: var(--card-bg);
  border-radius: var(--radius);
  border: 2px solid var(--border);
}

.empty-state-icon {
  width: 80px;
  height: 80px;
  margin: 0 auto 24px;
  background: var(--primary-light);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
}

.empty-state-title {
  font-size: 24px;
  font-weight: 700;
  color: var(--text);
  margin: 0 0 12px 0;
}

.empty-state-text {
  font-size: 16px;
  color: var(--text-secondary);
  margin: 0 0 32px 0;
}

/* Mobile Responsiveness */
@media (max-width: 768px) {
  .account-title {
    font-size: 32px;
  }
  
  .account-tabs {
    gap: 2px;
    padding: 3px;
  }
  
  .tab-btn {
    padding: 14px 16px;
    font-size: 14px;
  }
  
  .esims-grid {
    grid-template-columns: 1fr;
    gap: 20px;
  }
  
  .modal-content {
    margin: 20px;
  }
}

/* Animations */
@keyframes fadeIn {
  from { opacity: 0; transform: translateY(10px); }
  to { opacity: 1; transform: translateY(0); }
}
</style>

<!-- jQuery for AJAX -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<div class="account-enterprise">
  <div class="account-container">
    
    <!-- Header -->
    <div class="account-header">
      <h1 class="account-title">
        Welcome back, {{ customer.first_name | default: customer.email | split: '@' | first }}!
      </h1>
      <p class="account-subtitle">Manage your eSIMs, orders, and account settings</p>
    </div>
    
    <!-- Tab Navigation -->
    <div class="account-tabs">
      <button class="tab-btn active" onclick="switchTab('esims')">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <rect x="7" y="2" width="10" height="20" rx="2" stroke-width="2"/>
          <path d="M12 6h2M12 10h2M12 14h2" stroke-width="2"/>
        </svg>
        My eSIMs
      </button>
      
      <button class="tab-btn" onclick="switchTab('orders')">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" stroke-width="2"/>
        </svg>
        Order History
      </button>
      
      <button class="tab-btn" onclick="switchTab('settings')">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor">
          <path d="M12 15a3 3 0 100-6 3 3 0 000 6z" stroke-width="2"/>
          <path d="M19.4 15a1.65 1.65 0 00.33 1.82l.06.06a2 2 0 010 2.83 2 2 0 01-2.83 0l-.06-.06a1.65 1.65 0 00-1.82-.33 1.65 1.65 0 00-1 1.51V21a2 2 0 01-2 2 2 2 0 01-2-2v-.09A1.65 1.65 0 009 19.4a1.65 1.65 0 00-1.82.33l-.06.06a2 2 0 01-2.83 0 2 2 0 010-2.83l.06-.06a1.65 1.65 0 00.33-1.82 1.65 1.65 0 00-1.51-1H3a2 2 0 01-2-2 2 2 0 012-2h.09A1.65 1.65 0 004.6 9a1.65 1.65 0 00-.33-1.82l-.06-.06a2 2 0 010-2.83 2 2 0 012.83 0l.06.06a1.65 1.65 0 001.82.33H9a1.65 1.65 0 001-1.51V3a2 2 0 012-2 2 2 0 012 2v.09a1.65 1.65 0 001 1.51 1.65 1.65 0 001.82-.33l.06-.06a2 2 0 012.83 0 2 2 0 010 2.83l-.06.06a1.65 1.65 0 00-.33 1.82V9a1.65 1.65 0 001.51 1H21a2 2 0 012 2 2 2 0 01-2 2h-.09a1.65 1.65 0 00-1.51 1z" stroke-width="2"/>
        </svg>
        Settings
      </button>
    </div>
    
    <!-- eSIMs Tab -->
    <div id="esims-tab" class="tab-content active">
      
      <h2 class="section-title">Your Active eSIMs</h2>
      
      {% if customer.orders.size > 0 %}
        <div class="esims-grid" id="esims-grid">
          
          {% for order in customer.orders %}
            {% for line_item in order.line_items %}
              {% if line_item.product.title contains 'eSIM' or line_item.product.title contains 'esim' %}
                
                <div class="esim-card" data-order="{{ order.name | remove: '#' }}" onclick="loadEsimDetails(this)">
                  
                  <!-- Card Header -->
                  <div class="esim-card-header">
                    <div class="esim-card-title">
                      {{ line_item.product.title }}
                    </div>
                    <div class="esim-card-subtitle">
                      {{ line_item.variant.title | default: line_item.title }}
                    </div>
                  </div>
                  
                  <!-- Card Body -->
                  <div class="esim-card-body">
                    
                    <!-- Quick Info -->
                    <div class="esim-quick-info">
                      <div class="info-item">
                        <span class="info-label">Order</span>
                        <span class="info-value">{{ order.name }}</span>
                      </div>
                      <div class="info-item">
                        <span class="info-label">Date</span>
                        <span class="info-value">{{ order.created_at | date: "%b %d, %Y" }}</span>
                      </div>
                      <div class="info-item">
                        <span class="info-label">Price</span>
                        <span class="info-value">{{ line_item.price | money }}</span>
                      </div>
                      <div class="info-item">
                        <span class="info-label">Status</span>
                        <span class="status-badge active" id="status-{{ order.name | remove: '#' }}">Loading...</span>
                      </div>
                    </div>
                    
                    <!-- Data Usage Bar (will be populated via JS) -->
                    <div class="usage-bar-container" id="usage-{{ order.name | remove: '#' }}" style="display: none;">
                      <div class="usage-bar-header">
                        <span>Data Usage</span>
                        <span id="usage-text-{{ order.name | remove: '#' }}">-</span>
                      </div>
                      <div class="usage-bar">
                        <div class="usage-fill" id="usage-fill-{{ order.name | remove: '#' }}" style="width: 0%"></div>
                      </div>
                    </div>
                    
                    <!-- Actions -->
                    <div class="esim-card-actions">
                      <button class="btn btn-primary" onclick="event.stopPropagation(); showEsimDetails('{{ order.name | remove: '#' }}')">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                          <path d="M12 4v1m6 11h2m-6 0h-2v4m0-11v3m0 0h.01M12 12h4.01M16 20h4M4 12h4m12 0h.01M5 8h2a1 1 0 001-1V5a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1zm12 0h2a1 1 0 001-1V5a1 1 0 00-1-1h-2a1 1 0 00-1 1v2a1 1 0 001 1zM5 20h2a1 1 0 001-1v-2a1 1 0 00-1-1H5a1 1 0 00-1 1v2a1 1 0 001 1z" stroke-width="2"/>
                        </svg>
                        View Details
                      </button>
                      <button class="btn btn-secondary" onclick="event.stopPropagation(); topupEsim('{{ order.name | remove: '#' }}')">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                          <path d="M12 4v16m8-8H4" stroke-width="2"/>
                        </svg>
                        Top Up
                      </button>
                    </div>
                    
                  </div>
                </div>
                
              {% endif %}
            {% endfor %}
          {% endfor %}
          
        </div>
      {% else %}
        <div class="empty-state">
          <div class="empty-state-icon">
            <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="var(--primary)">
              <rect x="7" y="2" width="10" height="20" rx="2" stroke-width="2"/>
              <path d="M12 6h2M12 10h2M12 14h2" stroke-width="2"/>
            </svg>
          </div>
          <h3 class="empty-state-title">No eSIMs Yet</h3>
          <p class="empty-state-text">Purchase your first eSIM to see it here</p>
          <a href="/collections/all" class="btn btn-primary" style="display: inline-flex;">
            Browse eSIMs
          </a>
        </div>
      {% endif %}
      
    </div>
    
    <!-- Orders Tab -->
    <div id="orders-tab" class="tab-content">
      <h2 class="section-title">Order History</h2>
      <!-- Orders table code here (same as before) -->
    </div>
    
    <!-- Settings Tab -->
    <div id="settings-tab" class="tab-content">
      <h2 class="section-title">Account Settings</h2>
      <!-- Settings form here (same as before) -->
    </div>
    
  </div>
</div>

<!-- eSIM Detail Modal -->
<div class="esim-detail-modal" id="esimDetailModal">
  <div class="modal-content">
    <div class="modal-header">
      <button class="modal-close" onclick="closeDetailModal()">&times;</button>
      <h2 id="modalTitle">eSIM Details</h2>
      <p id="modalSubtitle">Loading...</p>
    </div>
    
    <div class="modal-body">
      
      <!-- Loading State -->
      <div id="modalLoading" style="text-align: center;">
        <div class="loading-spinner"></div>
        <p>Loading eSIM data...</p>
      </div>
      
      <!-- Content (will be populated via JS) -->
      <div id="modalContent" style="display: none;">
        
        <!-- QR Code Section -->
        <div class="qr-section">
          <h3 style="margin: 0 0 16px 0; font-size: 18px;">QR Code</h3>
          <img id="modalQR" class="qr-code" src="" alt="QR Code">
          <div class="qr-actions">
            <button class="btn btn-primary" onclick="downloadQR()">Download QR</button>
            <button class="btn btn-secondary" onclick="copyInstallLink()">Copy Link</button>
          </div>
        </div>
        
        <!-- Data Usage -->
        <div class="usage-bar-container">
          <div class="usage-bar-header">
            <span>Data Usage</span>
            <span id="modalUsageText">-</span>
          </div>
          <div class="usage-bar">
            <div class="usage-fill" id="modalUsageFill" style="width: 0%"></div>
          </div>
        </div>
        
        <!-- Details Grid -->
        <div class="detail-grid">
          <div class="detail-item">
            <span class="detail-label">ICCID</span>
            <span class="detail-value" id="modalICCID">-</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Status</span>
            <span class="detail-value" id="modalStatus">-</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Package</span>
            <span class="detail-value" id="modalPackage">-</span>
          </div>
          <div class="detail-item">
            <span class="detail-label">Expires</span>
            <span class="detail-value" id="modalExpires">-</span>
          </div>
        </div>
        
        <!-- Action Buttons -->
        <div class="esim-card-actions">
          <button class="btn btn-primary" onclick="topupFromModal()">Top Up Data</button>
          <button class="btn btn-secondary" onclick="showInstallGuide()">Install Guide</button>
        </div>
        
      </div>
      
    </div>
  </div>
</div>

<script>
// Global Variables
let currentOrder = null;
let esimCache = {};
const API_BASE = 'https://simbye.com/apps/topup/info/';
let customerEmail = '{{ customer.email }}';

// Initialize on page load
document.addEventListener('DOMContentLoaded', function() {
  // Load all eSIM statuses
  loadAllEsimStatuses();
});

// Switch Tabs
function switchTab(tab) {
  // Update buttons
  document.querySelectorAll('.tab-btn').forEach(btn => btn.classList.remove('active'));
  event.target.closest('.tab-btn').classList.add('active');
  
  // Update content
  document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
  document.getElementById(tab + '-tab').classList.add('active');
}

// Load all eSIM statuses on page load
function loadAllEsimStatuses() {
  const cards = document.querySelectorAll('.esim-card');
  
  cards.forEach(card => {
    const orderNumber = card.dataset.order;
    if (orderNumber) {
      loadEsimStatus(orderNumber);
    }
  });
}

// Load individual eSIM status
function loadEsimStatus(orderNumber) {
  // Try to use a proxy endpoint or JSONP
  // Since CORS blocks direct access, we'll simulate with cached data for now
  
  // For production, implement one of these solutions:
  // 1. Shopify Function as proxy
  // 2. Cloudflare Worker as proxy
  // 3. Request Simbye to add CORS headers
  // 4. Use JSONP if supported
  
  // Temporary solution: Show available data
  const statusElement = document.getElementById('status-' + orderNumber);
  if (statusElement) {
    // Check if we have metafield data
    {% for order in customer.orders %}
      {% assign clean_order = order.name | remove: '#' %}
      {% if order.metafields.Simbye.esimaccess_details %}
        if ('{{ clean_order }}' === orderNumber) {
          const esimData = {{ order.metafields.Simbye.esimaccess_details | json }};
          if (esimData && esimData.length > 0) {
            updateCardWithData(orderNumber, esimData[0]);
          }
        }
      {% endif %}
    {% endfor %}
    
    // If no metafield data, try alternative approach
    tryAlternativeDataLoad(orderNumber, statusElement);
  }
}

// Alternative data loading methods
function tryAlternativeDataLoad(orderNumber, statusElement) {
  // Method 1: Try JSONP
  const script = document.createElement('script');
  script.src = `${API_BASE}${orderNumber}?callback=handleEsimData&order=${orderNumber}`;
  script.onerror = function() {
    // JSONP failed, try next method
    tryIframeMethod(orderNumber, statusElement);
  };
  document.body.appendChild(script);
  
  // Set timeout for JSONP
  setTimeout(() => {
    if (!esimCache[orderNumber]) {
      statusElement.textContent = 'Click to view';
      statusElement.className = 'status-badge active';
    }
  }, 3000);
}

// JSONP Callback
window.handleEsimData = function(data, orderNumber) {
  if (data && data.code === 200 && data.data) {
    const esimList = data.data.obj?.esimList || data.data.esimList;
    if (esimList && esimList.length > 0) {
      esimCache[orderNumber] = esimList[0];
      updateCardWithData(orderNumber, esimList[0]);
    }
  }
};

// Try iframe method as fallback
function tryIframeMethod(orderNumber, statusElement) {
  // Create hidden iframe to bypass CORS
  const iframe = document.createElement('iframe');
  iframe.style.display = 'none';
  iframe.src = `/pages/check-esim?order_number=${orderNumber}&mode=data-only`;
  
  // Listen for message from iframe
  window.addEventListener('message', function(e) {
    if (e.data && e.data.type === 'esim-data' && e.data.order === orderNumber) {
      esimCache[orderNumber] = e.data.data;
      updateCardWithData(orderNumber, e.data.data);
    }
  });
  
  document.body.appendChild(iframe);
  
  // Clean up after timeout
  setTimeout(() => {
    iframe.remove();
  }, 5000);
}

// Update card with eSIM data
function updateCardWithData(orderNumber, esimData) {
  if (!esimData) return;
  
  // Update status
  const statusElement = document.getElementById('status-' + orderNumber);
  if (statusElement) {
    let status = 'Active';
    let statusClass = 'active';
    
    if (esimData.esimStatus === 'USEDUP') {
      status = 'Used Up';
      statusClass = 'expired';
    } else if (esimData.esimStatus === 'NEW') {
      status = 'Ready';
      statusClass = 'new';
    } else if (esimData.expiredTime && new Date(esimData.expiredTime) < new Date()) {
      status = 'Expired';
      statusClass = 'expired';
    }
    
    statusElement.textContent = status;
    statusElement.className = 'status-badge ' + statusClass;
  }
  
  // Update usage bar
  if (esimData.totalVolume && esimData.totalVolume > 0) {
    const usageContainer = document.getElementById('usage-' + orderNumber);
    const usageText = document.getElementById('usage-text-' + orderNumber);
    const usageFill = document.getElementById('usage-fill-' + orderNumber);
    
    if (usageContainer && usageText && usageFill) {
      const totalGB = (esimData.totalVolume / 1073741824).toFixed(2);
      const usedGB = ((esimData.orderUsage || 0) / 1073741824).toFixed(2);
      const percent = Math.min(100, Math.round(((esimData.orderUsage || 0) / esimData.totalVolume) * 100));
      
      usageContainer.style.display = 'block';
      usageText.textContent = `${usedGB}GB / ${totalGB}GB`;
      usageFill.style.width = percent + '%';
      
      if (percent >= 80) {
        usageFill.style.background = 'linear-gradient(135deg, #ff3b30, #ff6b60)';
      } else if (percent >= 60) {
        usageFill.style.background = 'linear-gradient(135deg, #ff9a00, #ffb347)';
      }
    }
  }
  
  // Cache the data
  esimCache[orderNumber] = esimData;
}

// Load eSIM Details (when card is clicked)
function loadEsimDetails(card) {
  const orderNumber = card.dataset.order;
  showEsimDetails(orderNumber);
}

// Show eSIM Details Modal
function showEsimDetails(orderNumber) {
  currentOrder = orderNumber;
  const modal = document.getElementById('esimDetailModal');
  modal.classList.add('active');
  
  // Show loading
  document.getElementById('modalLoading').style.display = 'block';
  document.getElementById('modalContent').style.display = 'none';
  
  // Check cache first
  if (esimCache[orderNumber]) {
    displayModalData(esimCache[orderNumber]);
  } else {
    // Try to load data
    loadDetailedEsimData(orderNumber);
  }
}

// Load detailed eSIM data for modal
function loadDetailedEsimData(orderNumber) {
  // Try multiple methods to get data
  
  // Method 1: Direct AJAX (will fail due to CORS but worth trying)
  if (window.jQuery) {
    jQuery.ajax({
      url: API_BASE + orderNumber,
      method: 'POST',
      data: { email: customerEmail },
      dataType: 'json',
      success: function(response) {
        if (response.code === 200 && response.data) {
          const esimList = response.data.obj?.esimList || response.data.esimList;
          if (esimList && esimList.length > 0) {
            esimCache[orderNumber] = esimList[0];
            displayModalData(esimList[0]);
          }
        }
      },
      error: function() {
        // AJAX failed, try alternative
        loadViaCheckPage(orderNumber);
      }
    });
  } else {
    loadViaCheckPage(orderNumber);
  }
}

// Load via Check eSIM page as proxy
function loadViaCheckPage(orderNumber) {
  // Create hidden iframe that loads check-esim page
  const iframe = document.createElement('iframe');
  iframe.style.display = 'none';
  iframe.src = `/pages/check-esim?order_number=${orderNumber}&email=${encodeURIComponent(customerEmail)}&auto=1`;
  
  // Wait for response
  const messageHandler = function(e) {
    if (e.data && e.data.type === 'esim-data' && e.data.order === orderNumber) {
      esimCache[orderNumber] = e.data.data;
      displayModalData(e.data.data);
      window.removeEventListener('message', messageHandler);
      iframe.remove();
    }
  };
  
  window.addEventListener('message', messageHandler);
  document.body.appendChild(iframe);
  
  // Timeout fallback
  setTimeout(() => {
    if (!esimCache[orderNumber]) {
      showFallbackModal(orderNumber);
    }
    iframe.remove();
  }, 5000);
}

// Display data in modal
function displayModalData(esimData) {
  if (!esimData) {
    showFallbackModal(currentOrder);
    return;
  }
  
  // Hide loading, show content
  document.getElementById('modalLoading').style.display = 'none';
  document.getElementById('modalContent').style.display = 'block';
  
  // Update title
  const packageName = esimData.packageList?.[0]?.packageName || 'eSIM Package';
  document.getElementById('modalTitle').textContent = packageName;
  document.getElementById('modalSubtitle').textContent = `Order #${currentOrder}`;
  
  // QR Code
  if (esimData.qrCodeUrl) {
    document.getElementById('modalQR').src = esimData.qrCodeUrl;
  }
  
  // Usage
  if (esimData.totalVolume && esimData.totalVolume > 0) {
    const totalGB = (esimData.totalVolume / 1073741824).toFixed(2);
    const usedGB = ((esimData.orderUsage || 0) / 1073741824).toFixed(2);
    const percent = Math.min(100, Math.round(((esimData.orderUsage || 0) / esimData.totalVolume) * 100));
    
    document.getElementById('modalUsageText').textContent = `${usedGB}GB / ${totalGB}GB`;
    document.getElementById('modalUsageFill').style.width = percent + '%';
  }
  
  // Details
  document.getElementById('modalICCID').textContent = esimData.iccid || '-';
  document.getElementById('modalStatus').textContent = esimData.esimStatus || '-';
  document.getElementById('modalPackage').textContent = packageName;
  document.getElementById('modalExpires').textContent = esimData.expiredTime ? 
    new Date(esimData.expiredTime).toLocaleDateString() : 'Never';
}

// Fallback modal (when data can't be loaded)
function showFallbackModal(orderNumber) {
  document.getElementById('modalLoading').style.display = 'none';
  document.getElementById('modalContent').innerHTML = `
    <div style="text-align: center; padding: 40px;">
      <h3 style="margin-bottom: 20px;">eSIM Details</h3>
      <p style="margin-bottom: 24px; color: var(--text-secondary);">
        For security reasons, please verify your email to view full eSIM details including QR code.
      </p>
      <a href="/pages/check-esim?order_number=${orderNumber}" 
         class="btn btn-primary" 
         style="display: inline-block;">
        View Full Details
      </a>
    </div>
  `;
  document.getElementById('modalContent').style.display = 'block';
}

// Close Detail Modal
function closeDetailModal() {
  document.getElementById('esimDetailModal').classList.remove('active');
  currentOrder = null;
}

// Download QR Code
function downloadQR() {
  const qrImg = document.getElementById('modalQR');
  if (qrImg && qrImg.src) {
    const link = document.createElement('a');
    link.href = qrImg.src;
    link.download = `esim-qr-${currentOrder}.png`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
}

// Copy Install Link
function copyInstallLink() {
  if (esimCache[currentOrder] && esimCache[currentOrder].shortUrl) {
    navigator.clipboard.writeText(esimCache[currentOrder].shortUrl);
    alert('Install link copied to clipboard!');
  }
}

// Top Up eSIM
function topupEsim(orderNumber) {
  // Check if daily/unlimited (no top-up)
  if (esimCache[orderNumber]) {
    const packageName = esimCache[orderNumber].packageList?.[0]?.packageName || '';
    if (packageName.toLowerCase().includes('daily') || 
        packageName.toLowerCase().includes('unlimited')) {
      alert('Daily and Unlimited plans cannot be topped up.');
      return;
    }
  }
  
  // Redirect to top-up page
  window.location.href = `/pages/top-up?order=${orderNumber}`;
}

// Top Up from Modal
function topupFromModal() {
  if (currentOrder) {
    topupEsim(currentOrder);
  }
}

// Show Install Guide
function showInstallGuide() {
  window.open('/pages/how-to-install-esim', '_blank');
}

// Close modal on ESC
document.addEventListener('keydown', function(e) {
  if (e.key === 'Escape') {
    closeDetailModal();
  }
});

// Close modal on outside click
document.addEventListener('click', function(e) {
  if (e.target.classList.contains('esim-detail-modal')) {
    closeDetailModal();
  }
});
</script>