<!-- sections/faq.liquid -->
<!-- SIMBYE FAQ PAGE - ENTERPRISE FIXED & COMPLETE -->

<style>
/* CSS Variables */
:root {
  --faq-bg: #ffffff;
  --faq-text: #1a1a1a;
  --faq-text-secondary: #666666;
  --faq-primary: #009a61;
  --faq-primary-hover: #00824f;
  --faq-accent: #00d97e;
  --faq-border: rgba(0, 0, 0, 0.08);
  --faq-shadow-sm: 0 4px 12px rgba(0, 0, 0, 0.06);
  --faq-shadow-md: 0 8px 24px rgba(0, 0, 0, 0.08);
  --faq-shadow-lg: 0 12px 32px rgba(0, 154, 97, 0.15);
  --faq-transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  --faq-radius: 16px;
  --faq-radius-lg: 24px;
}

/* Dark Mode */
[data-theme="dark"] {
  --faq-bg: #0a0a0a;
  --faq-text: #f5f5f5;
  --faq-text-secondary: #999999;
  --faq-primary: #00d97e;
  --faq-primary-hover: #009a61;
  --faq-accent: #00ff88;
  --faq-border: rgba(255, 255, 255, 0.08);
  --faq-shadow-sm: 0 4px 12px rgba(0, 0, 0, 0.3);
  --faq-shadow-md: 0 8px 24px rgba(0, 0, 0, 0.4);
  --faq-shadow-lg: 0 12px 32px rgba(0, 217, 126, 0.15);
}

/* Kill Shopify Grid */
.shopify-section:has(.faq-page) {
  display: block !important;
  padding: 0 !important;
  margin: 0 !important;
  grid-template-columns: unset !important;
}

/* Main Section */
.faq-page {
  width: 100%;
  min-height: 100vh;
  padding: 60px 0 100px;
  background: var(--faq-bg);
  position: relative;
  transition: background 0.3s ease;
}

/* Container */
.faq-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 40px;
}

/* Header */
.faq-header {
  text-align: center;
  margin-bottom: 60px;
  animation: fadeInUp 0.6s ease;
}

.faq-title {
  font-size: clamp(36px, 5vw, 56px);
  font-weight: 700;
  color: var(--faq-text);
  margin: 0 0 16px 0;
  letter-spacing: -0.02em;
}

.faq-subtitle {
  font-size: 18px;
  color: var(--faq-text-secondary);
  margin: 0 0 40px 0;
  line-height: 1.6;
}

/* Search Box */
.faq-search {
  position: relative;
  max-width: 600px;
  margin: 0 auto;
}

.faq-search-input {
  width: 100%;
  padding: 16px 50px 16px 20px;
  font-size: 16px;
  border: 2px solid var(--faq-border);
  border-radius: 12px;
  background: var(--faq-bg);
  color: var(--faq-text);
  transition: var(--faq-transition);
  font-family: inherit;
  outline: none;
}

.faq-search-input::placeholder {
  color: var(--faq-text-secondary);
  opacity: 0.6;
}

.faq-search-input:focus {
  border-color: var(--faq-primary);
  box-shadow: 0 0 0 4px rgba(0, 154, 97, 0.1);
}

.faq-search-icon {
  position: absolute;
  right: 20px;
  top: 50%;
  transform: translateY(-50%);
  width: 20px;
  height: 20px;
  color: var(--faq-text-secondary);
  pointer-events: none;
}

/* Category Navigation */
.faq-categories {
  display: flex;
  justify-content: center;
  flex-wrap: wrap;
  gap: 12px;
  margin-bottom: 60px;
  animation: fadeInUp 0.6s ease 0.1s both;
}

.category-btn {
  padding: 12px 24px;
  background: var(--faq-bg);
  border: 2px solid var(--faq-border);
  border-radius: 12px;
  color: var(--faq-text);
  font-size: 15px;
  font-weight: 600;
  cursor: pointer;
  transition: var(--faq-transition);
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  gap: 8px;
}

.category-btn:hover {
  border-color: var(--faq-primary);
  background: rgba(0, 154, 97, 0.05);
  transform: translateY(-2px);
}

.category-btn.active {
  background: var(--faq-primary);
  border-color: var(--faq-primary);
  color: white;
}

/* FAQ Categories */
.faq-category {
  margin-bottom: 60px;
  animation: fadeInUp 0.6s ease both;
  scroll-margin-top: 100px;
}

.category-title {
  font-size: 32px;
  font-weight: 700;
  color: var(--faq-text);
  margin: 0 0 32px 0;
  letter-spacing: -0.01em;
  padding-bottom: 16px;
  border-bottom: 2px solid var(--faq-border);
}

/* FAQ Items */
.faq-items {
  display: flex;
  flex-direction: column;
  gap: 16px;
}

.faq-item {
  background: var(--faq-bg);
  border: 2px solid var(--faq-border);
  border-radius: var(--faq-radius);
  overflow: hidden;
  transition: var(--faq-transition);
}

.faq-item:hover {
  border-color: var(--faq-primary);
  box-shadow: var(--faq-shadow-sm);
}

.faq-item.active {
  border-color: var(--faq-primary);
  box-shadow: var(--faq-shadow-md);
}

.faq-question {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  padding: 20px 24px;
  background: none;
  border: none;
  text-align: left;
  cursor: pointer;
  font-family: inherit;
  gap: 16px;
  transition: background 0.2s ease;
}

.faq-question:hover {
  background: rgba(0, 154, 97, 0.03);
}

[data-theme="dark"] .faq-question:hover {
  background: rgba(0, 217, 126, 0.05);
}

.faq-question-text {
  font-size: 18px;
  font-weight: 600;
  color: var(--faq-text);
  line-height: 1.4;
  flex: 1;
}

.faq-icon {
  width: 24px;
  height: 24px;
  color: var(--faq-primary);
  transition: transform var(--faq-transition);
  flex-shrink: 0;
}

.faq-item.active .faq-icon {
  transform: rotate(180deg);
}

.faq-answer {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  border-top: 1px solid transparent;
}

.faq-item.active .faq-answer {
  border-top-color: var(--faq-border);
}

.faq-answer-content {
  padding: 0 24px 24px;
  color: var(--faq-text-secondary);
  font-size: 16px;
  line-height: 1.7;
}

.faq-answer-content p {
  margin: 0 0 16px 0;
}

.faq-answer-content p:last-child {
  margin-bottom: 0;
}

.faq-answer-content a {
  color: var(--faq-primary);
  text-decoration: underline;
  font-weight: 600;
}

.faq-answer-content a:hover {
  color: var(--faq-primary-hover);
}

.faq-answer-content ul,
.faq-answer-content ol {
  margin: 16px 0;
  padding-left: 24px;
}

.faq-answer-content li {
  margin-bottom: 8px;
}

.faq-answer-content strong {
  font-weight: 700;
  color: var(--faq-text);
}

/* No Results */
.no-results {
  text-align: center;
  padding: 60px 20px;
  display: none;
}

.no-results.active {
  display: block;
}

.no-results-icon {
  width: 80px;
  height: 80px;
  margin: 0 auto 24px;
  color: var(--faq-text-secondary);
  opacity: 0.3;
}

.no-results-title {
  font-size: 24px;
  font-weight: 700;
  color: var(--faq-text);
  margin: 0 0 8px 0;
}

.no-results-text {
  font-size: 16px;
  color: var(--faq-text-secondary);
}

/* Responsive */
@media (max-width: 768px) {
  .faq-page {
    padding: 40px 0 60px;
  }
  
  .faq-container {
    padding: 0 20px;
  }
  
  .faq-header {
    margin-bottom: 40px;
  }
  
  .faq-title {
    font-size: 32px;
  }
  
  .faq-subtitle {
    font-size: 16px;
    margin-bottom: 32px;
  }
  
  .faq-categories {
    margin-bottom: 40px;
  }
  
  .category-btn {
    padding: 10px 20px;
    font-size: 14px;
  }
  
  .faq-category {
    margin-bottom: 40px;
  }
  
  .category-title {
    font-size: 24px;
    margin-bottom: 24px;
  }
  
  .faq-question {
    padding: 16px 20px;
  }
  
  .faq-question-text {
    font-size: 16px;
  }
  
  .faq-icon {
    width: 20px;
    height: 20px;
  }
  
  .faq-answer-content {
    padding: 0 20px 20px;
    font-size: 15px;
  }
}

/* Animations */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Accessibility */
@media (prefers-reduced-motion: reduce) {
  * {
    animation-duration: 0.01ms !important;
    transition-duration: 0.01ms !important;
  }
}
</style>

<section class="faq-page" id="faq-section-{{ section.id }}">
  <div class="faq-container">
    
    <!-- Header -->
    <div class="faq-header">
      <h1 class="faq-title">{{ section.settings.title | default: 'Frequently Asked Questions' }}</h1>
      <p class="faq-subtitle">{{ section.settings.subtitle | default: 'Find answers to common questions about our eSIM service' }}</p>
      
      <!-- Search -->
      {% if section.settings.show_search %}
        <div class="faq-search">
          <input 
            type="text" 
            class="faq-search-input" 
            id="faq-search-{{ section.id }}"
            placeholder="{{ section.settings.search_placeholder | default: 'Search for answers...' }}"
            aria-label="Search FAQ"
          >
          <svg class="faq-search-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <circle cx="11" cy="11" r="8"/>
            <path d="m21 21-4.35-4.35"/>
          </svg>
        </div>
      {% endif %}
    </div>
    
    <!-- Category Navigation -->
    {% if section.settings.show_quick_nav %}
      <div class="faq-categories" id="category-nav-{{ section.id }}"></div>
    {% endif %}
    
    <!-- FAQ Content -->
    <div id="faq-content-{{ section.id }}">
      {% assign categories = 'compatibility|Compatibility & Requirements,purchase|Purchase & Plans,activation|Activation & Setup,usage|Using Your eSIM,troubleshooting|Troubleshooting' | split: ',' %}
      
      {% for pair in categories %}
        {% assign parts = pair | split: '|' %}
        {% assign cat_key = parts[0] %}
        {% assign cat_label = parts[1] %}
        
        {% assign category_items = section.blocks | where: 'settings.category', cat_key %}
        
        {% if category_items.size > 0 %}
          <div class="faq-category" id="{{ cat_key }}-{{ section.id }}" data-category="{{ cat_key }}">
            <h2 class="category-title">{{ cat_label }}</h2>
            
            <div class="faq-items">
              {% for block in category_items %}
                {% if block.settings.question != blank and block.settings.answer != blank %}
                  {% assign question_text = block.settings.question %}
                  {% assign answer_html = block.settings.answer %}
                  {% assign answer_plain = block.settings.answer | strip_html %}
                  {% assign search_text = question_text | append: ' ' | append: answer_plain | downcase %}
                  
                  <div class="faq-item" 
                       data-question="{{ question_text | downcase }}" 
                       data-search="{{ search_text }}"
                       {{ block.shopify_attributes }}>
                    <button class="faq-question" 
                            aria-expanded="false"
                            aria-controls="answer-{{ block.id }}">
                      <span class="faq-question-text">{{ question_text }}</span>
                      <svg class="faq-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="m6 9 6 6 6-6"/>
                      </svg>
                    </button>
                    <div class="faq-answer" id="answer-{{ block.id }}">
                      <div class="faq-answer-content">
                        {{ answer_html }}
                      </div>
                    </div>
                  </div>
                {% endif %}
              {% endfor %}
            </div>
          </div>
        {% endif %}
      {% endfor %}
    </div>
    
    <!-- No Results -->
    <div class="no-results" id="no-results-{{ section.id }}">
      <svg class="no-results-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="11" cy="11" r="8"/>
        <path d="m21 21-4.35-4.35"/>
      </svg>
      <h3 class="no-results-title">No results found</h3>
      <p class="no-results-text">Try different keywords or browse by category</p>
    </div>
    
  </div>
</section>

<script>
(function() {
  'use strict';
  
  const sectionId = '{{ section.id }}';
  const searchInput = document.getElementById('faq-search-' + sectionId);
  const faqItems = document.querySelectorAll('#faq-section-' + sectionId + ' .faq-item');
  const categories = document.querySelectorAll('#faq-section-' + sectionId + ' .faq-category');
  const noResults = document.getElementById('no-results-' + sectionId);
  const categoryNav = document.getElementById('category-nav-' + sectionId);
  
  // Category labels
  const categoryMap = {
    'compatibility': 'Compatibility',
    'purchase': 'Purchase',
    'activation': 'Activation',
    'usage': 'Usage',
    'troubleshooting': 'Troubleshooting'
  };
  
  // Create category navigation
  function createCategoryNav() {
    if (!categoryNav) return;
    
    categories.forEach(category => {
      const id = category.getAttribute('data-category');
      const fullId = category.id;
      const btn = document.createElement('a');
      btn.href = '#' + fullId;
      btn.className = 'category-btn';
      btn.textContent = categoryMap[id] || id;
      btn.addEventListener('click', function(e) {
        e.preventDefault();
        scrollToCategory(fullId);
      });
      categoryNav.appendChild(btn);
    });
  }
  
  // Scroll to category
  function scrollToCategory(id) {
    const element = document.getElementById(id);
    if (element) {
      const offset = 100;
      const elementPosition = element.getBoundingClientRect().top;
      const offsetPosition = elementPosition + window.pageYOffset - offset;
      
      window.scrollTo({
        top: offsetPosition,
        behavior: 'smooth'
      });
    }
  }
  
  // Toggle FAQ item
  function toggleFAQ(item) {
    const isActive = item.classList.contains('active');
    const answer = item.querySelector('.faq-answer');
    const answerContent = item.querySelector('.faq-answer-content');
    const button = item.querySelector('.faq-question');
    
    // Close all other items in the same category (optional)
    const category = item.closest('.faq-category');
    if (category) {
      category.querySelectorAll('.faq-item.active').forEach(otherItem => {
        if (otherItem !== item) {
          otherItem.classList.remove('active');
          const otherAnswer = otherItem.querySelector('.faq-answer');
          const otherButton = otherItem.querySelector('.faq-question');
          otherAnswer.style.maxHeight = '0';
          otherButton.setAttribute('aria-expanded', 'false');
        }
      });
    }
    
    if (isActive) {
      item.classList.remove('active');
      answer.style.maxHeight = '0';
      button.setAttribute('aria-expanded', 'false');
    } else {
      item.classList.add('active');
      answer.style.maxHeight = answerContent.scrollHeight + 'px';
      button.setAttribute('aria-expanded', 'true');
    }
  }
  
  // Search functionality
  function handleSearch(query) {
    const searchTerm = query.toLowerCase().trim();
    let visibleCount = 0;
    
    if (searchTerm === '') {
      // Show all
      faqItems.forEach(item => {
        item.style.display = '';
      });
      categories.forEach(cat => {
        cat.style.display = '';
      });
      if (noResults) noResults.classList.remove('active');
      return;
    }
    
    // Filter items
    faqItems.forEach(item => {
      const searchData = item.getAttribute('data-search') || '';
      
      if (searchData.includes(searchTerm)) {
        item.style.display = '';
        visibleCount++;
      } else {
        item.style.display = 'none';
      }
    });
    
    // Show/hide categories
    categories.forEach(cat => {
      const visibleItems = cat.querySelectorAll('.faq-item:not([style*="display: none"])');
      if (visibleItems.length > 0) {
        cat.style.display = '';
      } else {
        cat.style.display = 'none';
      }
    });
    
    // Show no results if needed
    if (noResults) {
      if (visibleCount === 0) {
        noResults.classList.add('active');
      } else {
        noResults.classList.remove('active');
      }
    }
  }
  
  // Event listeners
  faqItems.forEach(item => {
    const button = item.querySelector('.faq-question');
    if (button) {
      button.addEventListener('click', () => toggleFAQ(item));
    }
  });
  
  if (searchInput) {
    let searchTimeout;
    searchInput.addEventListener('input', function() {
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        handleSearch(this.value);
      }, 150);
    });
  }
  
  // Initialize
  createCategoryNav();
  
  // Add Schema.org FAQPage markup
  function addSchemaMarkup() {
    const faqData = [];
    
    faqItems.forEach(item => {
      const question = item.querySelector('.faq-question-text')?.textContent;
      const answer = item.querySelector('.faq-answer-content')?.textContent;
      
      if (question && answer) {
        faqData.push({
          "@type": "Question",
          "name": question.trim(),
          "acceptedAnswer": {
            "@type": "Answer",
            "text": answer.trim()
          }
        });
      }
    });
    
    if (faqData.length > 0) {
      const script = document.createElement('script');
      script.type = 'application/ld+json';
      script.textContent = JSON.stringify({
        "@context": "https://schema.org",
        "@type": "FAQPage",
        "mainEntity": faqData
      });
      document.head.appendChild(script);
    }
  }
  
  addSchemaMarkup();
  
  // Handle hash on page load
  if (window.location.hash) {
    setTimeout(() => {
      const hash = window.location.hash.substring(1);
      scrollToCategory(hash);
    }, 100);
  }
})();
</script>

{% schema %}
{
  "name": "FAQ Page",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Page Title",
      "default": "Frequently Asked Questions"
    },
    {
      "type": "textarea",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "Find answers to common questions about our eSIM service"
    },
    {
      "type": "checkbox",
      "id": "show_search",
      "label": "Show search box",
      "default": true
    },
    {
      "type": "text",
      "id": "search_placeholder",
      "label": "Search Placeholder",
      "default": "Search for answers..."
    },
    {
      "type": "checkbox",
      "id": "show_quick_nav",
      "label": "Show category navigation",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "faq_item",
      "name": "FAQ Question",
      "settings": [
        {
          "type": "select",
          "id": "category",
          "label": "Category",
          "options": [
            {
              "value": "compatibility",
              "label": "Compatibility & Requirements"
            },
            {
              "value": "purchase",
              "label": "Purchase & Plans"
            },
            {
              "value": "activation",
              "label": "Activation & Setup"
            },
            {
              "value": "usage",
              "label": "Using Your eSIM"
            },
            {
              "value": "troubleshooting",
              "label": "Troubleshooting"
            }
          ],
          "default": "compatibility"
        },
        {
          "type": "text",
          "id": "question",
          "label": "Question",
          "default": "What is eSIM?"
        },
        {
          "type": "richtext",
          "id": "answer",
          "label": "Answer",
          "default": "<p>An eSIM is a digital SIM card that allows you to activate a cellular plan without using a physical SIM card.</p>"
        }
      ]
    }
  ],
  "max_blocks": 200,
  "presets": [
    {
      "name": "FAQ Page",
      "blocks": [
        {
          "type": "faq_item",
          "settings": {
            "category": "compatibility",
            "question": "What is eSIM?",
            "answer": "<p>An eSIM is a digital SIM card that allows you to activate a cellular plan without using a physical SIM card.</p>"
          }
        }
      ]
    }
  ]
}
{% endschema %}