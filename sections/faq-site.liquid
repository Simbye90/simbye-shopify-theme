<!-- sections/faq-enterprise.liquid -->
<!-- SIMBYE FAQ - ENTERPRISE LEVEL - FIXED & OPTIMIZED -->

<style>
:root {
  --faq-max-width: 1100px;
  --faq-primary: #009a61;
  --faq-primary-2: #00d97e;
  --faq-text: #1a1a1a;
  --faq-text-secondary: #666666;
  --faq-bg: #ffffff;
  --faq-card: #ffffff;
  --faq-border: rgba(0,0,0,0.08);
  --faq-radius: 16px;
  --faq-radius-lg: 24px;
  --faq-shadow-sm: 0 4px 12px rgba(0,0,0,0.06);
  --faq-shadow-md: 0 8px 24px rgba(0,0,0,0.08);
  --faq-shadow-lg: 0 12px 32px rgba(0,154,97,0.12);
  --faq-transition: 220ms cubic-bezier(.4,0,.2,1);
}

[data-theme="dark"] {
  --faq-text: #f5f5f5;
  --faq-text-secondary: #a1a1a1;
  --faq-bg: #0a0a0a;
  --faq-card: #121212;
  --faq-border: rgba(255,255,255,0.10);
  --faq-shadow-sm: 0 4px 12px rgba(0,0,0,0.35);
  --faq-shadow-md: 0 8px 24px rgba(0,0,0,0.45);
  --faq-shadow-lg: 0 12px 32px rgba(0,217,126,0.15);
}

/* Kill Shopify Grid */
.shopify-section:has(.faq-wrap) {
  display: block !important;
  padding: 0 !important;
  margin: 0 !important;
  grid-template-columns: unset !important;
}

/* Section Frame */
.faq-wrap {
  background: var(--faq-bg);
  color: var(--faq-text);
  padding: 60px 20px 100px;
  min-height: 100vh;
}

.faq-container {
  width: 100%;
  max-width: var(--faq-max-width);
  margin: 0 auto;
}

/* Title + Intro */
.faq-header {
  margin-bottom: 48px;
  text-align: center;
}

.faq-title {
  font-size: clamp(32px, 5vw, 56px);
  font-weight: 800;
  letter-spacing: -0.02em;
  margin: 0 0 16px 0;
  color: var(--faq-text);
}

.faq-sub {
  margin: 0 0 40px 0;
  color: var(--faq-text-secondary);
  font-size: 18px;
  line-height: 1.6;
}

/* Search */
.faq-search {
  margin: 0 0 40px;
  max-width: 600px;
  margin-left: auto;
  margin-right: auto;
}

.faq-search-input {
  width: 100%;
  padding: 16px 20px;
  border-radius: 14px;
  border: 2px solid var(--faq-border);
  background: var(--faq-card);
  color: var(--faq-text);
  font-size: 16px;
  outline: none;
  transition: var(--faq-transition);
  box-shadow: var(--faq-shadow-sm);
  font-family: inherit;
}

.faq-search-input:focus {
  border-color: var(--faq-primary);
  box-shadow: 0 0 0 4px rgba(0,154,97,0.12);
}

.faq-search-input::placeholder {
  color: var(--faq-text-secondary);
  opacity: 0.6;
}

/* Quick Nav Chips */
.faq-quick-nav {
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  gap: 12px;
  margin: 0 0 60px;
}

.faq-chip {
  display: inline-flex;
  align-items: center;
  gap: 8px;
  padding: 12px 20px;
  font-weight: 600;
  font-size: 15px;
  color: var(--faq-text);
  background: var(--faq-card);
  border: 2px solid var(--faq-border);
  border-radius: 999px;
  text-decoration: none;
  transition: var(--faq-transition);
  box-shadow: var(--faq-shadow-sm);
}

.faq-chip:hover {
  transform: translateY(-2px);
  border-color: var(--faq-primary);
  box-shadow: var(--faq-shadow-md);
  background: rgba(0,154,97,0.05);
}

.faq-chip[hidden] { 
  display: none !important; 
}

/* Category */
.faq-category {
  margin: 0 0 60px;
  scroll-margin-top: 120px;
}

.faq-category[hidden] { 
  display: none !important; 
}

.faq-category-title {
  font-size: clamp(24px, 4vw, 32px);
  font-weight: 700;
  margin: 0 0 24px;
  letter-spacing: -0.015em;
  color: var(--faq-text);
  padding-bottom: 16px;
  border-bottom: 2px solid var(--faq-border);
}

/* Items */
.faq-list {
  display: grid;
  gap: 16px;
}

.faq-item {
  border: 2px solid var(--faq-border);
  background: var(--faq-card);
  border-radius: var(--faq-radius);
  box-shadow: var(--faq-shadow-sm);
  overflow: hidden;
  transition: var(--faq-transition);
}

.faq-item:hover {
  border-color: rgba(0,154,97,0.3);
  box-shadow: var(--faq-shadow-md);
}

.faq-item.open {
  border-color: var(--faq-primary);
  box-shadow: var(--faq-shadow-lg);
}

/* Question button (accessible) */
.faq-q {
  width: 100%;
  text-align: left;
  background: transparent;
  border: 0;
  padding: 20px 24px;
  color: var(--faq-text);
  display: flex;
  align-items: flex-start;
  gap: 16px;
  cursor: pointer;
  font-size: 18px;
  font-weight: 700;
  letter-spacing: -0.01em;
  position: relative;
  transition: background var(--faq-transition);
  font-family: inherit;
  line-height: 1.4;
}

.faq-q:hover { 
  background: rgba(0,154,97,0.03); 
}

[data-theme="dark"] .faq-q:hover { 
  background: rgba(0,217,126,0.05); 
}

.faq-icon {
  flex: 0 0 28px;
  width: 28px; 
  height: 28px;
  border-radius: 8px;
  display: inline-flex;
  align-items: center; 
  justify-content: center;
  background: linear-gradient(135deg, var(--faq-primary), var(--faq-primary-2));
  box-shadow: 0 4px 12px rgba(0,154,97,0.25);
  transition: transform var(--faq-transition);
}

.faq-item.open .faq-icon {
  transform: rotate(45deg);
}

.faq-icon svg { 
  width: 16px; 
  height: 16px; 
  color: #fff; 
  stroke-width: 2.5;
}

.faq-q-text {
  flex: 1;
}

.faq-expand {
  margin-left: auto;
  width: 24px; 
  height: 24px;
  transform: rotate(0deg);
  transition: transform var(--faq-transition);
  flex-shrink: 0;
  color: var(--faq-primary);
}

.faq-item.open .faq-expand { 
  transform: rotate(180deg); 
}

/* Answer panel (animated) */
.faq-a {
  padding: 0 24px;
  max-height: 0;
  overflow: hidden;
  transition: max-height 350ms cubic-bezier(.4,0,.2,1), padding 200ms ease;
  border-top: 1px solid transparent;
}

.faq-a-inner {
  padding: 0 0 24px;
  color: var(--faq-text-secondary);
  line-height: 1.7;
  font-size: 16px;
}

.faq-item.open .faq-a {
  max-height: 2000px;
  padding: 16px 24px 0;
  border-top-color: var(--faq-border);
}

/* No Results */
.faq-empty {
  display: none;
  margin: 40px 0;
  padding: 60px 24px;
  border: 2px dashed var(--faq-border);
  border-radius: var(--faq-radius-lg);
  text-align: center;
  background: rgba(0,0,0,0.01);
}

[data-theme="dark"] .faq-empty {
  background: rgba(255,255,255,0.02);
}

.faq-empty[aria-hidden="false"] { 
  display: block; 
}

.faq-empty-icon {
  width: 64px;
  height: 64px;
  margin: 0 auto 20px;
  color: var(--faq-text-secondary);
  opacity: 0.4;
}

.faq-empty-title {
  font-size: 24px;
  font-weight: 700;
  color: var(--faq-text);
  margin: 0 0 8px;
}

.faq-empty-text {
  font-size: 16px;
  color: var(--faq-text-secondary);
  margin: 0;
}

/* Answer content helpers */
.faq-a-inner p {
  margin: 0 0 16px;
}

.faq-a-inner p:last-child {
  margin-bottom: 0;
}

.faq-a-inner img { 
  max-width: 100%; 
  height: auto; 
  border-radius: 12px; 
  margin: 16px 0;
}

.faq-a-inner a { 
  color: var(--faq-primary); 
  font-weight: 600; 
  text-decoration: underline; 
}

.faq-a-inner a:hover {
  color: var(--faq-primary-2);
}

.faq-a-inner ul, 
.faq-a-inner ol { 
  padding-left: 24px; 
  margin: 16px 0;
}

.faq-a-inner li {
  margin-bottom: 8px;
}

/* Small screens */
@media (max-width: 768px) {
  .faq-wrap {
    padding: 40px 16px 60px;
  }
  
  .faq-header {
    margin-bottom: 32px;
  }
  
  .faq-title {
    font-size: 32px;
  }
  
  .faq-sub {
    font-size: 16px;
  }
  
  .faq-search {
    margin-bottom: 32px;
  }
  
  .faq-quick-nav {
    margin-bottom: 40px;
  }
  
  .faq-chip {
    padding: 10px 16px;
    font-size: 14px;
  }
  
  .faq-category {
    margin-bottom: 40px;
  }
  
  .faq-category-title {
    font-size: 24px;
    margin-bottom: 20px;
  }
  
  .faq-q { 
    font-size: 16px; 
    padding: 16px 20px; 
  }
  
  .faq-icon {
    width: 24px;
    height: 24px;
  }
  
  .faq-icon svg {
    width: 14px;
    height: 14px;
  }
  
  .faq-expand {
    width: 20px;
    height: 20px;
  }
  
  .faq-a { 
    padding: 0 20px; 
  }
  
  .faq-item.open .faq-a {
    padding: 12px 20px 0;
  }
  
  .faq-a-inner { 
    padding: 0 0 20px;
    font-size: 15px;
  }
  
  .faq-empty {
    padding: 40px 20px;
  }
}

/* Respect reduced motion */
@media (prefers-reduced-motion: reduce) {
  .faq-a,
  .faq-q,
  .faq-chip,
  .faq-search-input,
  .faq-item,
  .faq-icon,
  .faq-expand { 
    transition: none !important; 
  }
}

/* Animations */
@keyframes fadeInUp {
  from {
    opacity: 0;
    transform: translateY(20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}
</style>

<section id="faq" class="faq-wrap" data-section-id="{{ section.id }}">
  <div class="faq-container">
    
    <!-- Header -->
    <header class="faq-header">
      <h1 class="faq-title">{{ section.settings.title | default: 'Frequently Asked Questions' }}</h1>
      {% if section.settings.subtitle != blank %}
        <p class="faq-sub">{{ section.settings.subtitle }}</p>
      {% endif %}
    </header>

    <!-- Search -->
    {% if section.settings.show_search %}
      <div class="faq-search">
        <label for="faq-search-{{ section.id }}" class="visually-hidden">Search FAQs</label>
        <input 
          id="faq-search-{{ section.id }}"
          class="faq-search-input"
          type="search"
          placeholder="{{ section.settings.search_placeholder | default: 'Search questions...' }}"
          autocomplete="off"
          aria-label="Search FAQ"
        />
      </div>
    {% endif %}

    {% comment %} Determine which categories have content {% endcomment %}
    {% assign has_compatibility = false %}
    {% assign has_purchase = false %}
    {% assign has_activation = false %}
    {% assign has_usage = false %}
    {% assign has_troubleshooting = false %}

    {% for block in section.blocks %}
      {% if block.type == 'faq_item' and block.settings.question != blank %}
        {% case block.settings.category %}
          {% when 'compatibility' %}
            {% assign has_compatibility = true %}
          {% when 'purchase' %}
            {% assign has_purchase = true %}
          {% when 'activation' %}
            {% assign has_activation = true %}
          {% when 'usage' %}
            {% assign has_usage = true %}
          {% when 'troubleshooting' %}
            {% assign has_troubleshooting = true %}
        {% endcase %}
      {% endif %}
    {% endfor %}

    <!-- Quick Nav -->
    {% if section.settings.show_quick_nav %}
      <nav class="faq-quick-nav" aria-label="FAQ categories">
        <a class="faq-chip" href="#compatibility" {% unless has_compatibility %}hidden{% endunless %}>
          Compatibility & Requirements
        </a>
        <a class="faq-chip" href="#purchase" {% unless has_purchase %}hidden{% endunless %}>
          Purchase & Plans
        </a>
        <a class="faq-chip" href="#activation" {% unless has_activation %}hidden{% endunless %}>
          Activation & Setup
        </a>
        <a class="faq-chip" href="#usage" {% unless has_usage %}hidden{% endunless %}>
          Using Your eSIM
        </a>
        <a class="faq-chip" href="#troubleshooting" {% unless has_troubleshooting %}hidden{% endunless %}>
          Troubleshooting
        </a>
      </nav>
    {% endif %}

    <!-- No Results -->
    <div id="faq-results-empty-{{ section.id }}" class="faq-empty" aria-hidden="true">
      <svg class="faq-empty-icon" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <circle cx="11" cy="11" r="8"/>
        <path d="m21 21-4.35-4.35"/>
      </svg>
      <h3 class="faq-empty-title">No results found</h3>
      <p class="faq-empty-text">Try different keywords or browse by category</p>
    </div>

    <!-- Categories -->
    {% assign categories = 'compatibility|Compatibility & Requirements,purchase|Purchase & Plans,activation|Activation & Setup,usage|Using Your eSIM,troubleshooting|Troubleshooting' | split: ',' %}

    {% for pair in categories %}
      {% assign parts = pair | split: '|' %}
      {% assign cat_key = parts[0] %}
      {% assign cat_label = parts[1] %}

      {% comment %} Check if category has items {% endcomment %}
      {% assign has_items = false %}
      {% for block in section.blocks %}
        {% if block.type == 'faq_item' and block.settings.category == cat_key and block.settings.question != blank %}
          {% assign has_items = true %}
          {% break %}
        {% endif %}
      {% endfor %}

      <section 
        id="{{ cat_key }}" 
        class="faq-category" 
        data-cat="{{ cat_key }}"
        {% unless has_items %}hidden{% endunless %}
      >
        <h2 class="faq-category-title">{{ cat_label }}</h2>
        <div class="faq-list">
          
          {% for block in section.blocks %}
            {% if block.type == 'faq_item' and block.settings.category == cat_key and block.settings.question != blank %}
              
              {% comment %} Assign variables for this block {% endcomment %}
              {% assign question_text = block.settings.question %}
              {% assign answer_html = block.settings.answer %}
              {% assign answer_for_search = answer_html | strip_html %}
              {% assign search_data = question_text | append: ' ' | append: answer_for_search | downcase %}

              <article
                class="faq-item"
                id="q-{{ block.id }}"
                data-category="{{ cat_key }}"
                data-search="{{ search_data | escape_once }}"
                {{ block.shopify_attributes }}
              >
                <button 
                  class="faq-q"
                  id="btn-{{ block.id }}"
                  aria-expanded="false"
                  aria-controls="a-{{ block.id }}"
                  type="button"
                >
                  <span class="faq-icon" aria-hidden="true">
                    <svg viewBox="0 0 24 24" fill="none" stroke="currentColor">
                      <path d="M12 5v14M5 12h14"/>
                    </svg>
                  </span>
                  <span class="faq-q-text">{{ question_text }}</span>
                  <svg class="faq-expand" viewBox="0 0 24 24" fill="none" stroke="currentColor" aria-hidden="true">
                    <path d="M6 9l6 6 6-6"/>
                  </svg>
                </button>
                
                <div 
                  class="faq-a" 
                  id="a-{{ block.id }}" 
                  role="region" 
                  aria-labelledby="btn-{{ block.id }}"
                >
                  <div class="faq-a-inner">
                    {{ answer_html }}
                  </div>
                </div>
              </article>
              
            {% endif %}
          {% endfor %}
          
        </div>
      </section>
    {% endfor %}
    
  </div>

  {% comment %} JSON-LD FAQPage Schema {% endcomment %}
  <script type="application/ld+json">
  {
    "@context": "https://schema.org",
    "@type": "FAQPage",
    "mainEntity": [
      {%- assign first_item = true -%}
      {%- for block in section.blocks -%}
        {%- if block.type == 'faq_item' and block.settings.question != blank and block.settings.answer != blank -%}
          {%- unless first_item -%},{%- endunless -%}
          {
            "@type": "Question",
            "name": {{ block.settings.question | strip | json }},
            "acceptedAnswer": {
              "@type": "Answer",
              "text": {{ block.settings.answer | strip_html | strip | json }}
            }
          }
          {%- assign first_item = false -%}
        {%- endif -%}
      {%- endfor -%}
    ]
  }
  </script>
</section>

<script>
(function() {
  'use strict';

  const root = document.querySelector('[data-section-id="{{ section.id }}"]');
  if (!root) return;

  const searchInput = root.querySelector('#faq-search-{{ section.id }}');
  const emptyBox = root.querySelector('#faq-results-empty-{{ section.id }}');
  const items = Array.from(root.querySelectorAll('.faq-item'));
  const categories = Array.from(root.querySelectorAll('.faq-category'));
  const headerOffset = 110;

  // Accordion behavior
  root.addEventListener('click', function(e) {
    const btn = e.target.closest('.faq-q');
    if (!btn) return;

    const item = btn.closest('.faq-item');
    const isOpen = item.classList.contains('open');

    // Close others in same category (optional)
    const list = item.closest('.faq-list');
    if (list) {
      list.querySelectorAll('.faq-item.open').forEach(el => {
        if (el !== item) {
          el.classList.remove('open');
          const otherBtn = el.querySelector('.faq-q');
          if (otherBtn) otherBtn.setAttribute('aria-expanded', 'false');
        }
      });
    }

    // Toggle current
    item.classList.toggle('open', !isOpen);
    btn.setAttribute('aria-expanded', String(!isOpen));
  });

  // Smooth scroll for quick nav
  root.querySelectorAll('.faq-quick-nav a[href^="#"]').forEach(a => {
    a.addEventListener('click', function(ev) {
      ev.preventDefault();
      const id = this.getAttribute('href').slice(1);
      const target = root.querySelector('#' + CSS.escape(id));
      if (!target) return;
      
      const y = target.getBoundingClientRect().top + window.pageYOffset - headerOffset;
      window.scrollTo({ top: y, behavior: 'smooth' });
      
      const h2 = target.querySelector('.faq-category-title');
      if (h2) { 
        h2.setAttribute('tabindex', '-1'); 
        h2.focus({ preventScroll: true }); 
      }
      
      if (history.replaceState) {
        history.replaceState(null, '', '#' + id);
      }
    });
  });

  // Live search
  function runSearch(value) {
    const q = (value || '').trim().toLowerCase();
    let visibleCount = 0;

    items.forEach(el => {
      const searchData = el.getAttribute('data-search') || '';
      const match = q === '' || searchData.includes(q);
      el.style.display = match ? '' : 'none';
      if (match) visibleCount++;
    });

    categories.forEach(cat => {
      const visibleInCat = Array.from(cat.querySelectorAll('.faq-item'))
        .some(el => el.style.display !== 'none');
      cat.hidden = !visibleInCat;
    });

    if (emptyBox) {
      emptyBox.setAttribute('aria-hidden', String(visibleCount > 0));
    }
  }

  if (searchInput) {
    let timer;
    searchInput.addEventListener('input', function() {
      clearTimeout(timer);
      const val = this.value;
      timer = setTimeout(() => runSearch(val), 100);
    });
  }

  // Handle hash on load
  function handleHash() {
    const hash = window.location.hash.replace('#', '');
    if (!hash) return;

    const cat = root.querySelector('#' + CSS.escape(hash) + '.faq-category');
    if (cat) {
      const y = cat.getBoundingClientRect().top + window.pageYOffset - headerOffset;
      window.scrollTo({ top: y });
      return;
    }
    
    const item = root.querySelector('#' + CSS.escape(hash) + '.faq-item');
    if (item) {
      const btn = item.querySelector('.faq-q');
      if (btn) {
        item.classList.add('open');
        btn.setAttribute('aria-expanded', 'true');
      }
      const y = item.getBoundingClientRect().top + window.pageYOffset - headerOffset;
      window.scrollTo({ top: y });
    }
  }

  // Init
  runSearch('');
  handleHash();

  // Lazy load images in answers
  root.querySelectorAll('.faq-a-inner img').forEach(img => {
    if (!img.hasAttribute('loading')) {
      img.setAttribute('loading', 'lazy');
    }
  });

})();
</script>

{% schema %}
{
  "name": "FAQ - Enterprise",
  "tag": "section",
  "class": "section-faq-enterprise",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Title",
      "default": "Frequently Asked Questions"
    },
    {
      "type": "textarea",
      "id": "subtitle",
      "label": "Subtitle",
      "default": "Find quick answers about compatibility, purchase, activation and troubleshooting."
    },
    {
      "type": "checkbox",
      "id": "show_search",
      "label": "Show search",
      "default": true
    },
    {
      "type": "text",
      "id": "search_placeholder",
      "label": "Search placeholder",
      "default": "Search questions..."
    },
    {
      "type": "checkbox",
      "id": "show_quick_nav",
      "label": "Show category navigation",
      "default": true
    }
  ],
  "blocks": [
    {
      "type": "faq_item",
      "name": "FAQ Question",
      "settings": [
        {
          "type": "select",
          "id": "category",
          "label": "Category",
          "options": [
            {
              "value": "compatibility",
              "label": "Compatibility & Requirements"
            },
            {
              "value": "purchase",
              "label": "Purchase & Plans"
            },
            {
              "value": "activation",
              "label": "Activation & Setup"
            },
            {
              "value": "usage",
              "label": "Using Your eSIM"
            },
            {
              "value": "troubleshooting",
              "label": "Troubleshooting"
            }
          ],
          "default": "compatibility"
        },
        {
          "type": "text",
          "id": "question",
          "label": "Question",
          "default": "What is eSIM?"
        },
        {
          "type": "richtext",
          "id": "answer",
          "label": "Answer",
          "default": "<p>An eSIM is a digital SIM card that allows you to activate a cellular plan without using a physical SIM card.</p>"
        }
      ]
    }
  ],
  "max_blocks": 200,
  "presets": [
    {
      "name": "FAQ - Enterprise",
      "blocks": [
        {
          "type": "faq_item",
          "settings": {
            "category": "compatibility",
            "question": "What is eSIM?",
            "answer": "<p>An eSIM is a digital SIM card that allows you to activate a cellular plan without using a physical SIM card.</p>"
          }
        }
      ]
    }
  ]
}
{% endschema %}